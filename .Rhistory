externalDataReference)
#Create a character vector of the new column names for the waves in the GLAD
#sign up
GLAD_signup_wave_col_names <- c(
"completed_wave_1",
"completed_wave_2",
"completed_wave_3",
"completed_wave_4",
"completed_wave_5",
"completed_wave_6",
"completed_wave_7",
"completed_wave_8",
"completed_wave_9",
"completed_wave_10",
"completed_wave_11",
"completed_wave_12",
"completed_wave_13",
"completed_wave_14"
)
#Create N completed wave variable in GLAD sign up for each COPING object
GLAD_signup_waves <- COPING_waves_tib_list %>%
map2(GLAD_signup_wave_col_names, function(x, y){
df <- glad_signup_completed_baseline %>%
mutate(!!y :=
case_when(
externalDataReference %in% x$externalDataReference ~ 1,
externalDataReference %not_in% x$externalDataReference ~ 0
))
return(df)
})
GLAD_signup_waves_merged <- GLAD_signup_waves %>%
reduce(full_join)
#Check data
GLAD_signup_waves_merged %>%
dim()
GLAD_signup_waves_merged %>%
colnames()
#See distribution for each variable
GLAD_signup_wave_col_names %>%
map(function(x){
group_by_at(GLAD_signup_waves_merged, x) %>%
summarise(Count = n()) %>%
as_tibble()
})
#Calculate every pt's total disorders with row sums
glad_signup_total_waves <- GLAD_signup_waves_merged %>%
mutate(
total_COPING_waves =
rowSums(.[GLAD_signup_wave_col_names])
)
#Check results
glad_signup_total_waves %>%
freq(total_COPING_waves)
glad_signup_final <- glad_signup_total_waves %>%
filter(age_cleaned >= 16 &
age_cleaned <= 117) %>%  #41,142, 28 pt's removed
filter(!is.na(gender_recode_labelled)) %>% #40,271, 871 pt's removed
filter(joined_coping_first_invitation_labelled != "Not applicable") #34,285, 5,986 pt's removed
#Check results
glad_signup_total_waves %>%
dim()
glad_signup_final %>%
dim()
write_rds(glad_signup_final, paste0(processed_data_path, "glad_coping_participation.rds"))
knitr::opts_chunk$set(echo = TRUE)
remove(list = ls())
#install.packages("broom")
#install.packages("knitr)
#install.packages("car")
#install.packages("tidyverse")
library(broom)
library(knitr)
library(car)
library(tidyverse)
source("..//COPING_participation_paths.r")
glad_coping_participation_raw <- read_rds(paste0(processed_data_path, processed_data_name))
#Check data
glad_coping_participation_raw %>%
head()
gender_contingency_table <- table(glad_coping_participation_raw$gender_recode_labelled,
glad_coping_participation_raw$completed_baseline_labelled)
#Check output
gender_contingency_table
ethnicity_contingency_table <- table(glad_coping_participation_raw$ethnicity_labelled,
glad_coping_participation_raw$completed_baseline_labelled)
#Check output
ethnicity_contingency_table
education_contingency_table <- table(glad_coping_participation_raw$highest_education,
glad_coping_participation_raw$completed_baseline_labelled)
#Check output
education_contingency_table
employment_contingency_table <- table(glad_coping_participation_raw$employment_labelled,
glad_coping_participation_raw$completed_baseline_labelled)
#Check output
employment_contingency_table
partnership_contingency_table <- table(glad_coping_participation_raw$partnership_status_labelled,
glad_coping_participation_raw$completed_baseline_labelled)
#Check output
partnership_contingency_table
gender_chi2_test <- chisq.test(gender_contingency_table,
correct = TRUE)
#Check output
gender_chi2_test
post_hoc_chi2_func <- function(contingency_table, correct_adj = FALSE, sig_level = 0.05){
#Get the adjusted residuals
chi2_result <- chisq.test(contingency_table,
correct = correct_adj)$stdres
#Make Bonferonni correction
print(bonferroni <- sig_level/(nrow(contingency_table) * ncol(contingency_table)))
#Get critical z value
print(qnorm(bonferroni/2))
return(chi2_result)
}
post_hoc_chi2_func(gender_contingency_table,
correct_adj = TRUE)
ethnicity_chi2_test <- chisq.test(ethnicity_contingency_table,
correct = TRUE)
#Check output
ethnicity_chi2_test
post_hoc_chi2_func(ethnicity_contingency_table,
correct_adj = TRUE)
education_chi2_test <- chisq.test(education_contingency_table,
correct = TRUE)
#Check output
education_chi2_test
post_hoc_chi2_func(education_contingency_table,
correct_adj = TRUE)
employment_chi2_test <- chisq.test(employment_contingency_table,
correct = TRUE)
#Check output
employment_chi2_test
post_hoc_chi2_func(employment_contingency_table,
correct_adj = TRUE)
partnership_chi2_test <- chisq.test(partnership_contingency_table,
correct = TRUE)
#Check output
partnership_chi2_test
post_hoc_chi2_func(partnership_contingency_table,
correct_adj = TRUE)
sociodemographic_LR_model <- glm(
formula = completed_baseline ~ age_cleaned +
gender_recode +
highest_education +
dem.questions_based_ethnic_origin +
dem.what_is_your_current_employment_status +
partnership_status,
family = "binomial",
data = glad_coping_participation_raw)
#Check output
summary(sociodemographic_LR_model)
#Put sociodemographic variable names into vector in order that they appear in summary(model1)
sociodemographic_variable_names <- c(
"Intercept",
"age_cleaned",
"gender_recode",
"highest_education",
"dem.questions_based_ethnic_origin",
"dem.what_is_your_current_employment",
"partnership_status"
)
#Create tidy model output
sociodemographic_LR_model_tidy <- tidy(
sociodemographic_LR_model,
exponentiate = T,
conf.int = T) %>%
mutate(
Variable = sociodemographic_variable_names,
Significance = if_else(
p.value < 0.05,
1,
0
) %>%
recode_factor(
"0" = "Not-significant",
"1" = "Significant"
)) %>%
select(
Variable,
OR = estimate,
`CI 95% lower` = conf.low,
`CI 95% upper` = conf.high,
`p value` = p.value,
Significance
)
sociodemographic_LR_model_tidy %>%
head(7)
#Create kable output
sociodemographic_LR_model_kable <- kable(sociodemographic_LR_model_tidy[-c(1), ],
digits = 2)
#Need to add physical health comorbidity variable
psychiatric_and_health_LR_model <- glm(
formula = completed_baseline ~ phq.sum_score +
gad.sum_score +
audit.sum_score +
dem.select_the_box_that_best_describes_you +
physical_health_comorbidities +
mental_health_comorbidities +
depressive_and_anxiety_comorbidity +
eating_disorders +
OCRDs +
psychotic_and_biploar_disorder +
mhd.asd +
mhd.addadhd +
mhd.personality_disorder,
family = "binomial",
data = glad_coping_participation_raw)
#Check output
summary(psychiatric_and_health_LR_model)
#Put psychiatric and health variable names into vector in order that they appear in summary(model2)
psychiatric_and_health_variable_names <- c(
"Intercept",
"gad.sum_score",
"phq.sum_score",
"audit.sum_score",
"dem.select_the_box_that_best_describes_you",
"physical_health_comorbidities",
"mental_health_comorbidities",
"depressive_and_anxiety_comorbidity",
"eating_disorders",
"OCRDs",
"psychotic_and_biploar_disorder",
"mhd.asd",
"mhd.addadhd",
"mhd.personality_disorder"
)
#Create tidy model output
psychiatric_and_health_LR_model_tidy <- tidy(
psychiatric_and_health_LR_model,
exponentiate = T,
conf.int = T) %>%
mutate(
Variable = psychiatric_and_health_variable_names,
Significance = if_else(
p.value < 0.05,
1,
0
) %>%
recode_factor(
"0" = "Not-significant",
"1" = "Significant"
)) %>%
select(
Variable,
OR = estimate,
`CI 95% lower` = conf.low,
`CI 95% upper` = conf.high,
`p value` = p.value,
Significance
)
psychiatric_and_health_LR_model_tidy %>%
head(14)
#Create kable output
psychiatric_and_health_LR_model_kable <- kable(psychiatric_and_health_LR_model_tidy[-c(1), ],
digits = 2)
psychiatric_and_health_LR_model_kable
glad_study_variables_LR_model <- glm(
formula = completed_baseline ~ startDate +
kit_returned +
joined_coping_first_invitation,
family = "binomial",
data = glad_coping_participation_raw)
#Check output
summary(glad_study_variables_LR_model)
#Put glad study variable names into vector in order that they appear in summary(model3)
glad_study_variable_names <- c(
"Intercept",
"startDate",
"kit_returned",
"joined_coping_first_invitation"
)
#Create tidy model output
glad_study_variables_LR_model_tidy <- tidy(
glad_study_variables_LR_model,
exponentiate = T,
conf.int = T) %>%
mutate(
Variable = glad_study_variable_names,
Significance = if_else(
p.value < 0.05,
1,
0
) %>%
recode_factor(
"0" = "Not-significant",
"1" = "Significant"
)) %>%
select(
Variable,
OR = estimate,
`CI 95% lower` = conf.low,
`CI 95% upper` = conf.high,
`p value` = p.value,
Significance
)
glad_study_variables_LR_model_tidy %>%
head()
#Create kable output
glad_study_variables_LR_model_kable <- kable(glad_study_variables_LR_model_tidy[-c(1), ],
digits = 2)
complete_LR_model <- glm(
formula = completed_baseline ~ age_cleaned +
gender_recode +
highest_education +
dem.questions_based_ethnic_origin +
dem.what_is_your_current_employment_status +
partnership_status +
phq.sum_score +
gad.sum_score +
audit.sum_score +
dem.select_the_box_that_best_describes_you +
physical_health_comorbidities +
mental_health_comorbidities +
depressive_and_anxiety_comorbidity +
eating_disorders +
OCRDs +
psychotic_and_biploar_disorder +
mhd.asd +
mhd.addadhd +
mhd.personality_disorder +
startDate +
kit_returned +
joined_coping_first_invitation,
family = "binomial",
data = glad_coping_participation_raw)
#Check output
summary(complete_LR_model)
#Put all LR variable names into vector in the order they appear in summary(model4)
complete_LR_model_names <- c(
"Intercept",
"age_cleaned",
"gender_recode",
"highest_education",
"dem.questions_based_ethnic_origin",
"dem.what_is_your_current_employment_status",
"partnership_status",
"phq.sum_score",
"gad.sum_score",
"audit.sum_score",
"dem.select_the_box_that_best_describes_you",
"physical_health_comorbidities",
"mental_health_comorbidities",
"depressive_and_anxiety_comorbidity",
"eating_disorders",
"OCRDs",
"psychotic_and_biploar_disorder",
"mhd.asd",
"mhd.addadhd",
"mhd.personality_disorder",
"startDate",
"kit_returned",
"joined_coping_first_invitation"
)
#Create tidy model output
complete_LR_model_tidy <- tidy(
complete_LR_model,
exponentiate = T,
conf.int = T) %>%
mutate(
Variable = complete_LR_model_names,
Significance = if_else(
p.value < 0.05,
1,
0
) %>%
recode_factor(
"0" = "Not-significant",
"1" = "Significant"
)) %>%
select(
Variable,
OR = estimate,
`CI 95% lower` = conf.low,
`CI 95% upper` = conf.high,
`p value` = p.value,
Significance
)
complete_LR_model_tidy %>%
head(23)
#Create kable output
complete_LR_model_kable <- kable(complete_LR_model_tidy[-c(1), ],
digits = 2)
complete_LR_model_VIF <- complete_LR_model %>%
vif()
complete_LR_model_VIF
all.corr.mat <- glad_coping_participation_raw %>%
select(complete_LR_model_names[-1]) %>%
cor(use = "pairwise.complete.obs") %>%
round(.,
digits = 2)
complete_LR_model_names[-1]
all.corr.mat <- glad_coping_participation_raw %>%
select(complete_LR_model_names[-c("Intercept", "startDate")]) %>%
cor(use = "pairwise.complete.obs") %>%
round(.,
digits = 2)
all.corr.mat <- glad_coping_participation_raw %>%
select(complete_LR_model_names[-c("Intercept", "startDate")]) %>%
cor(use = "pairwise.complete.obs") %>%
round(.,
digits = 2)
glad_coping_participation_raw %>%
select(complete_LR_model_names[-c("Intercept", "startDate")])
complete_LR_model_names
all.corr.mat <- glad_coping_participation_raw %>%
select(complete_LR_model_names[-1:21]) %>%
cor(use = "pairwise.complete.obs") %>%
round(.,
digits = 2)
all.corr.mat <- glad_coping_participation_raw %>%
select(complete_LR_model_names[-1:-21]) %>%
cor(use = "pairwise.complete.obs") %>%
round(.,
digits = 2)
complete_LR_model_names[-1:-21]
complete_LR_model_names[-1:-21]
exclude_cols <- c(
"Intercept",
"startDate"
)
all.corr.mat <- glad_coping_participation_raw %>%
select(complete_LR_model_names[-exclude_cols]) %>%
cor(use = "pairwise.complete.obs") %>%
round(.,
digits = 2)
complete_LR_model_names[-exclude_cols]
exclude_cols <- c(
"Intercept",
"startDate"
)
complete_LR_model_names[!exclude_cols %in% complete_LR_model_names]
complete_LR_model_names[exclude_cols %in% complete_LR_model_names]
complete_LR_model_names[!exclude_cols %in% complete_LR_model_names]
exclude_cols %in% complete_LR_model_names
!complete_LR_model_names %in% exclude_cols
complete_LR_model_names[!complete_LR_model_names %in% exclude_cols]
all.corr.mat <- glad_coping_participation_raw %>%
select(complete_LR_model_names[!complete_LR_model_names %in% exclude_cols]) %>%
cor(use = "pairwise.complete.obs") %>%
round(.,
digits = 2)
all.corr.mat
library(corrplot)
typeof(all.corr.mat)
all.corr.matrix <- as.matrix(all.corr.mat)
library(polycor)
all.corr.mat <- glad_coping_participation_raw %>%
select(complete_LR_model_names[!complete_LR_model_names %in% exclude_cols]) %>%
hetcor(use = "pairwise.complete.obs") %>%
round(.,
digits = 2)
complete_LR_model_names[!complete_LR_model_names %in% exclude_cols]
glad_coping_participation_raw %>%
select(complete_LR_model_names[!complete_LR_model_names %in% exclude_cols]) %>%
hetcor(use = "pairwise.complete.obs")
correlation_vars <- complete_LR_model_names %>%
select(-"startDate", -"Intercept")
glad_coping_participation_raw %>%
select(complete_LR_model_names,
-exclude_cols)
glad_coping_participation_raw %>%
select(complete_LR_model_names,
-startDate)
correlation_vars <- glad_coping_participation_raw %>%
select(complete_LR_model_names[-"Intercpet"],
-startDate) %>%
all.corr.mat <- glad_coping_participation_raw %>%
select(complete_LR_model_names[!complete_LR_model_names %in% exclude_cols]) %>%
hetcor(use = "pairwise.complete.obs") %>%
round(.,
digits = 2)
glad_coping_participation_raw %>%
select(complete_LR_model_names[-"Intercpet"],
-startDate)
correlation_vars <- glad_coping_participation_raw %>%
select(complete_LR_model_names[-1],
-startDate)
glad_coping_participation_raw %>%
select(complete_LR_model_names[-1],
-startDate)
all.corr.mat <- correlation_vars %>%
hetcor(use = "pairwise.complete.obs") %>%
round(.,
digits = 2)
all.corr.mat <- correlation_vars %>%
hetcor(use = "pairwise.complete.obvs") %>%
round(.,
digits = 2)
all.corr.mat <- correlation_vars %>%
hetcor(use = "pairwise.complete.obs") %>%
round(.,
digits = 2)
all.corr.mat <- correlation_vars %>%
hetcor(use = "pairwise.complete.obs")
all.corr.mat$correlations
all.corr.matrix <- as.matrix(all.corr.mat)
all.corr.matrix
all.p.matrix <- as.matrix(all.corr.mat$tests)
all.corr.matrix %>%
corrplot(method = "color", # objects to represent the correlations on plot
type = "lower", # only use the lower triangle of the matrix
diag = FALSE, # do not show the correlations on the diagonal
addgrid.col = NA,
addCoef.col = "black", # colour for the correlation coefficients in the plot
tl.cex = 0.8, #size of text
tl.col = "black",
col=colorRampPalette(c("dodgerblue4",
"white",
"firebrick4"))(200), # colours for correlations
# Combine with significance
p.mat = all.p.matrix, # Matrix with p values
sig.level = 0.01, # Choose significant level
insig = "blank") # Nonsignificant correlations have no colour
