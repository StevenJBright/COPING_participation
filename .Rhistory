startDate < end7 ~ ".Wave_7",
startDate >= start9 &
startDate< end9 ~ ".Wave_9",
startDate >= start11 &
startDate < end11 ~ ".Wave_11",
startDate >= start13 &
startDate < end13 ~ ".Wave_13",
startDate >= start15 &
startDate < end15 ~ ".Wave_15",
startDate >= start2 &
startDate < end2 ~ ".Wave_2_QA",
startDate >= start4 &
startDate < end4 ~ ".Wave_4_QA",
startDate >= start6 &
startDate < end6 ~ ".Wave_6_QA",
startDate >= start8 &
startDate < end8 ~ ".Wave_8_QA",
startDate >= start10 &
startDate < end10 ~ ".Wave_10_QA",
startDate >= start12 &
startDate < end12 ~ ".Wave_12_QA",
startDate >= start14 &
startDate < end14 ~ ".Wave_14_QA"
))
#Note: QA are questionnaires that are A FOLLOW UP QUESTIONNAIRES but answered within a time point that was considered a "follow up B time-point"
COPING_followup_B_phq_waves <- COPING_followup_B_phq_raw %>%
mutate(COPING_waves_B =
case_when(
startDate >= start1 &
startDate < end1 ~ ".Wave_1_QB",
startDate >= start3 &
startDate < end3 ~ ".Wave_3_QB",
startDate >= start5 &
startDate < end5 ~ ".Wave_5_QB",
startDate >= start7 &
startDate < end7 ~ ".Wave_7_QB",
startDate >= start9 &
startDate< end9 ~ ".Wave_9_QB",
startDate >= start11 &
startDate < end11 ~ ".Wave_11_QB",
startDate >= start13 &
startDate < end13 ~ ".Wave_13_QB",
startDate >= start15 &
startDate < end15 ~ ".Wave_15_QB",
startDate >= start2 &
startDate < end2 ~ ".Wave_2",
startDate >= start4 &
startDate < end4 ~ ".Wave_4",
startDate >= start6 &
startDate < end6 ~ ".Wave_6",
startDate >= start8 &
startDate < end8 ~ ".Wave_8",
startDate >= start10 &
startDate < end10 ~ ".Wave_10",
startDate >= start12 &
startDate < end12 ~ ".Wave_12",
startDate >= start14 &
startDate < end14 ~ ".Wave_14"
))
COPING_followup_A_dem_waves %>%
freq(COPING_waves_A)
COPING_followup_B_phq_waves %>%
freq(COPING_waves_B)
COPING_followup_A_wave_1 <- COPING_followup_A_dem_waves %>%
filter(COPING_waves_A == ".Wave_1")
COPING_followup_A_wave_3 <- COPING_followup_A_dem_waves %>%
filter(COPING_waves_A == ".Wave_3")
COPING_followup_A_wave_5 <- COPING_followup_A_dem_waves %>%
filter(COPING_waves_A == ".Wave_5")
COPING_followup_A_wave_7 <- COPING_followup_A_dem_waves %>%
filter(COPING_waves_A == ".Wave_7")
COPING_followup_A_wave_9 <- COPING_followup_A_dem_waves %>%
filter(COPING_waves_A == ".Wave_9")
COPING_followup_A_wave_11 <- COPING_followup_A_dem_waves %>%
filter(COPING_waves_A == ".Wave_11")
COPING_followup_A_wave_13 <- COPING_followup_A_dem_waves %>%
filter(COPING_waves_A == ".Wave_13")
COPING_followup_B_wave_2 <- COPING_followup_B_phq_waves %>%
filter(COPING_waves_B == ".Wave_2")
COPING_followup_B_wave_4 <- COPING_followup_B_phq_waves %>%
filter(COPING_waves_B == ".Wave_4")
COPING_followup_B_wave_6 <- COPING_followup_B_phq_waves %>%
filter(COPING_waves_B == ".Wave_6")
COPING_followup_B_wave_8 <- COPING_followup_B_phq_waves %>%
filter(COPING_waves_B == ".Wave_8")
COPING_followup_B_wave_10 <- COPING_followup_B_phq_waves %>%
filter(COPING_waves_B == ".Wave_10")
COPING_followup_B_wave_12 <- COPING_followup_B_phq_waves %>%
filter(COPING_waves_B == ".Wave_12")
COPING_followup_B_wave_14 <- COPING_followup_B_phq_waves %>%
filter(COPING_waves_B == ".Wave_14")
#Put the wave data sets into a new list
COPING_waves_tib_list <- list(COPING_followup_A_wave_1,
COPING_followup_B_wave_2,
COPING_followup_A_wave_3,
COPING_followup_B_wave_4,
COPING_followup_A_wave_5,
COPING_followup_B_wave_6,
COPING_followup_A_wave_7,
COPING_followup_B_wave_8,
COPING_followup_A_wave_9,
COPING_followup_B_wave_10,
COPING_followup_A_wave_11,
COPING_followup_B_wave_12,
COPING_followup_A_wave_13,
COPING_followup_B_wave_14)
COPING_waves_tib_list_cleansIDs <- COPING_waves_tib_list %>%
map(distinct,
externalDataReference,
.keep_all = TRUE)
COPING_waves_tib_list_cleansIDs <- COPING_waves_tib_list_cleansIDs %>%
map(drop_na,
externalDataReference)
#Create a character vector of the new column names for the waves in the GLAD
#sign up
GLAD_signup_wave_col_names <- c(
"completed_wave_1",
"completed_wave_2",
"completed_wave_3",
"completed_wave_4",
"completed_wave_5",
"completed_wave_6",
"completed_wave_7",
"completed_wave_8",
"completed_wave_9",
"completed_wave_10",
"completed_wave_11",
"completed_wave_12",
"completed_wave_13",
"completed_wave_14"
)
#Create N completed wave variable in GLAD sign up for each COPING object
GLAD_signup_waves <- COPING_waves_tib_list %>%
map2(GLAD_signup_wave_col_names, function(x, y){
df <- glad_signup_completed_baseline %>%
mutate(!!y :=
case_when(
externalDataReference %in% x$externalDataReference ~ 1,
externalDataReference %not_in% x$externalDataReference ~ 0
))
return(df)
})
GLAD_signup_waves_merged <- GLAD_signup_waves %>%
reduce(full_join)
#Check data
GLAD_signup_waves_merged %>%
dim()
GLAD_signup_waves_merged %>%
colnames()
#See distribution for each variable
GLAD_signup_wave_col_names %>%
map(function(x){
group_by_at(GLAD_signup_waves_merged, x) %>%
summarise(Count = n()) %>%
as_tibble()
})
#Calculate every pt's total disorders with row sums
glad_signup_total_waves <- GLAD_signup_waves_merged %>%
mutate(
total_COPING_waves =
rowSums(.[GLAD_signup_wave_col_names])
)
#Check results
glad_signup_total_waves %>%
freq(total_COPING_waves)
#Check results
glad_signup_total_waves %>%
freq(joined_coping_first_invitation)
glad_signup_final <- glad_signup_total_waves %>%
filter(age_cleaned >= 16 &
age_cleaned <= 117) %>%  #41,142, 28 pt's removed
filter(!is.na(gender_recode_labelled)) %>% #40,271, 871 pt's removed
filter(joined_coping_first_invitation == "Not applicable")
#Check results
glad_signup_total_waves %>%
dim()
glad_signup_total_waves %>%
dim()
glad_signup_final %>%
dim()
glad_signup_final <- glad_signup_total_waves %>%
filter(age_cleaned >= 16 &
age_cleaned <= 117) %>%  #41,142, 28 pt's removed
filter(!is.na(gender_recode_labelled)) %>% #40,271, 871 pt's removed
filter(joined_coping_first_invitation != "Not applicable")
glad_signup_total_waves %>%
dim()
glad_signup_final %>%
dim()
40271 - 34285
processed_data_path
write_rds(glad_signup_final, paste0(processed_data_path, "glad_coping_participation.rds"))
glad_signup_final %>%
colnames()
knitr::opts_chunk$set(echo = TRUE)
remove(list = ls())
#install.packages("tidyverse")
library(tidyverse)
source("..//COPING_participation_paths.r")
glad_coping_participation_raw <- read_rds(paste0(processed_data_path, processed_data_name))
#Check data
glad_coping_participation_raw %>%
head()
gender_contingency_table <- table(glad_coping_participation_raw$gender_recode_labelled,
glad_coping_participation_raw$completed_baseline_labelled)
#Check output
gender_contingency_table
ethnicity_contingency_table <- table(glad_coping_participation_raw$ethnicity_labelled,
glad_coping_participation_raw$completed_baseline_labelled)
#Check output
ethnicity_contingency_table
education_contingency_table <- table(glad_coping_participation_raw$highest_education,
glad_coping_participation_raw$completed_baseline_labelled)
#Check output
education_contingency_table
employment_contingency_table <- table(glad_coping_participation_raw$employment_labelled,
glad_coping_participation_raw$completed_baseline_labelled)
#Check output
employment_contingency_table
partnership_contingency_table <- table(glad_coping_participation_raw$partnership_status_labelled,
glad_coping_participation_raw$completed_baseline_labelled)
#Check output
partnership_contingency_table
?chisq.test()
chisq.test(gender_contingency_table,
correct = TRUE)
chisq.test(ethnicity_contingency_table,
correct = TRUE)
chisq.test(education_contingency_table,
correct = TRUE)
chisq.test(employment_contingency_table,
correct = TRUE)
chisq.test(employment_contingency_table,
correct = TRUE)
chisq.test(partnership_contingency_table,
correct = TRUE)
gender_chi2_test <- chisq.test(gender_contingency_table,
correct = FALSE)
#Check output
gender_chi2_test
gender_chi2_test <- chisq.test(gender_contingency_table,
correct = TRUE)
#Check output
gender_chi2_test
gender_contingency_table
gender_chi2_test
gender_chi2_test$statistic
gender_chi2_test$expected
gender_chi2_test$method
chisq.test(gender_contingency_table,
correct = TRUE)$stdres
sig_level <- .05
sig_level <- 0.05
nrow(gender_contingency_table)
ncol(gender_contingency_table)
#Adjust for multiple testing with Bonferonni
adj_sig_gender_chi2 <- sig/(nrow(gender_contingency_table) * ncol(gender_contingency_table))
sig_level <- 0.05
#Get the adjusted residuals
chisq.test(gender_contingency_table,
correct = TRUE)$stdres
#Adjust for multiple testing with Bonferonni
adj_sig_gender_chi2 <- sig_level/(nrow(gender_contingency_table) * ncol(gender_contingency_table))
adj_sig_gender_chi2
#Critical Z value
qnorm(adj_sig_gender_chi2/2)
#Get the adjusted residuals
chisq.test(ethnicity_contingency_table,
correct = TRUE)$stdres
#Adjust for multiple testing with Bonferonni
adj_sig_ethnicity_chi2 <- sig_level/(nrow(adj_sig_ethnicity_chi2) * ncol(adj_sig_ethnicity_chi2))
#Get the adjusted residuals
chisq.test(ethnicity_contingency_table,
correct = TRUE)$stdres
#Adjust for multiple testing with Bonferonni
adj_sig_ethnicity_chi2 <- sig_level/(nrow(ethnicity_contingency_table) *
ncol(ethnicity_contingency_table))
adj_sig_ethnicity_chi2
#Critical Z value
qnorm(adj_sig_ethnicity_chi2/2)
#Get the adjusted residuals
chisq.test(employment_contingency_table,
correct = TRUE)$stdres
#Adjust for multiple testing with Bonferonni
adj_sig_employment_chi2 <- sig_level/(nrow(employment_contingency_table) *
ncol(employment_contingency_table))
adj_sig_employment_chi2
#Critical Z value
qnorm(adj_sig_employment_chi2/2)
employment_contingency_table[, c(2, 3)]
employment_contingency_table[, c(1, 2)]
#install.packages("tidyverse")
install.packages("RVAideMemoire")
library(RVAideMemoire)
chisq.multcomp(employment_contingency_table, p.method = "bonferroni")
#Get the adjusted residuals
chisq.test(education_contingency_table,
correct = TRUE)$stdres
#Adjust for multiple testing with Bonferonni
adj_sig_education_chi2 <- sig_level/(nrow(education_contingency_table) *
ncol(education_contingency_table))
adj_sig_education_chi2
#Critical Z value
qnorm(adj_sig_education_chi2/2)
#Get the adjusted residuals
chisq.test(partnership_contingency_table,
correct = TRUE)$stdres
#Adjust for multiple testing with Bonferonni
adj_sig_partnership_chi2 <- sig_level/(nrow(partnership_contingency_table) *
ncol(partnership_contingency_table))
adj_sig_partnership_chi2
#Critical Z value
qnorm(adj_sig_partnership_chi2/2)
post_hoc_chi2 <- function(contingency_table, correct_adj = FALSE, sig_level = 0.05){
#Get the adjusted residuals
chi2_result <- chisq.test(contingency_table,
correct = correct_adj)
#Make Bonferonni correction
bonferroni <- sig_level/(nrow(contingency_table) * ncol(contingency_table))
#Get critical z value
print(qnorm(bonferroni/2))
return(chi2_result)
}
post_hoc_chi2(gender_contingency_table,
correcy = TRUE)
post_hoc_chi2(gender_contingency_table,
correct_adj = TRUE)
post_hoc_chi2 <- function(contingency_table, correct_adj = FALSE, sig_level = 0.05){
#Get the adjusted residuals
chi2_result <- chisq.test(contingency_table,
correct = correct_adj)$stdres
#Make Bonferonni correction
bonferroni <- sig_level/(nrow(contingency_table) * ncol(contingency_table))
#Get critical z value
print(qnorm(bonferroni/2))
return(chi2_result)
}
post_hoc_chi2(gender_contingency_table,
correct_adj = TRUE)
post_hoc_chi2 <- function(contingency_table, correct_adj = FALSE, sig_level = 0.05){
#Get the adjusted residuals
chi2_result <- chisq.test(contingency_table,
correct = correct_adj)$stdres
#Make Bonferonni correction
bonferroni <- sig_level/(nrow(contingency_table) * ncol(contingency_table))
#Get critical z value
qnorm(bonferroni/2)
return(chi2_result)
}
post_hoc_chi2(gender_contingency_table,
correct_adj = TRUE)
post_hoc_chi2 <- function(contingency_table, correct_adj = FALSE, sig_level = 0.05){
#Get the adjusted residuals
chi2_result <- chisq.test(contingency_table,
correct = correct_adj)$stdres
#Make Bonferonni correction
bonferroni <- sig_level/(nrow(contingency_table) * ncol(contingency_table))
#Get critical z value
print(qnorm(bonferroni/2))
return(chi2_result)
}
post_hoc_chi2(gender_contingency_table,
correct_adj = TRUE)
post_hoc_chi2_func <- function(contingency_table, correct_adj = FALSE, sig_level = 0.05){
#Get the adjusted residuals
chi2_result <- chisq.test(contingency_table,
correct = correct_adj)$stdres
#Make Bonferonni correction
bonferroni <- sig_level/(nrow(contingency_table) * ncol(contingency_table))
#Get critical z value
print(qnorm(bonferroni/2))
return(chi2_result)
}
post_hoc_chi2_func(gender_contingency_table,
correct_adj = TRUE)
post_hoc_chi2_func <- function(contingency_table, correct_adj = FALSE, sig_level = 0.05){
#Get the adjusted residuals
chi2_result <- chisq.test(contingency_table,
correct = correct_adj)$stdres
#Make Bonferonni correction
print(bonferroni <- sig_level/(nrow(contingency_table) * ncol(contingency_table)))
#Get critical z value
print(qnorm(bonferroni/2))
return(chi2_result)
}
post_hoc_chi2_func(gender_contingency_table,
correct_adj = TRUE)
post_hoc_chi2_func(ethnicity_contingency_table,
correct_adj = TRUE)
post_hoc_chi2_func(ethnicity_contingency_table,
correct_adj = TRUE)
#Get the adjusted residuals
chisq.test(ethnicity_contingency_table,
correct = TRUE)$stdres
#Adjust for multiple testing with Bonferonni
adj_sig_ethnicity_chi2 <- sig_level/(nrow(ethnicity_contingency_table) *
ncol(ethnicity_contingency_table))
adj_sig_ethnicity_chi2
#Critical Z value
qnorm(adj_sig_ethnicity_chi2/2)
post_hoc_chi2_func(education_contingency_table,
correct_adj = TRUE)
post_hoc_chi2_func(employment_contingency_table,
correct_adj = TRUE)
post_hoc_chi2_func(partnership_contingency_table,
correct_adj = TRUE)
#Need to add physcial health comorbidity variable
psychiatric_and_health_LR_model <- glm(
formula = completed_baseline ~ phq.sum_score +
gad.sum_score +
audit.sum_score +
dem.select_the_box_that_best_describes_you +
mental_health_comorbidities +
depressive_and_anxiety_comorbidity +
eating_disorders +
OCRDs +
psychotic_and_biploar_disorder +
mhd.asd +
mhd.addadhd +
mhd.personality_disorder
family = "binomial",
#Need to add physcial health comorbidity variable
psychiatric_and_health_LR_model <- glm(
formula = completed_baseline ~ phq.sum_score +
gad.sum_score +
audit.sum_score +
dem.select_the_box_that_best_describes_you +
mental_health_comorbidities +
depressive_and_anxiety_comorbidity +
eating_disorders +
OCRDs +
psychotic_and_biploar_disorder +
mhd.asd +
mhd.addadhd +
mhd.personality_disorder,
family = "binomial",
data = glad_coping_participation_raw)
#Check output
summary(psychiatric_and_health_LR_model)
glad_study_variables_LR_model <- glm(
formula = completed_baseline ~ startDate +
kit_returned,
joined_coping_first_invitation,
family = "binomial",
data = glad_coping_participation_raw)
glad_study_variables_LR_model <- glm(
formula = completed_baseline ~ as.numeric(startDate) +
kit_returned,
joined_coping_first_invitation,
family = "binomial",
data = glad_coping_participation_raw)
glad_coping_participation_raw %>%
head(startDate)
glad_coping_participation_raw %>%
select(startDate) %>%
head()
glad_coping_participation_raw %>%
select(startDate) %>%
as.numeric() %>%
head()
glad_coping_participation_raw %>%
select(startDate) %>%
as.numeric(.) %>%
head()
glad_coping_participation_raw %>%
select(startDate) %>%
head()
glad_study_variables_LR_model <- glm(
formula = completed_baseline ~ startDate +
kit_returned +
joined_coping_first_invitation,
family = "binomial",
data = glad_coping_participation_raw)
#Check output
summary(glad_study_variables_LR_model)
glad_study_variables_LR_model <- glm(
formula = completed_baseline ~ startDate +
kit_returned +
joined_coping_first_invitation,
family = "binomial",
data = glad_coping_participation_raw)
#Check output
summary(glad_study_variables_LR_model)
levels(glad_coping_participation_raw$joined_coping_first_invitation)
#Check output
summary(glad_study_variables_LR_model)
full_LR_model <- glm(
formula = completed_baseline ~ age_cleaned +
gender_recode +
highest_education +
dem.questions_based_ethnic_origin +
dem.what_is_your_current_employment_status +
partnership_status +
phq.sum_score +
gad.sum_score +
audit.sum_score +
dem.select_the_box_that_best_describes_you +
mental_health_comorbidities +
depressive_and_anxiety_comorbidity +
eating_disorders +
OCRDs +
psychotic_and_biploar_disorder +
mhd.asd +
mhd.addadhd +
mhd.personality_disorder +
startDate +
kit_returned +
joined_coping_first_invitation,
family = "binomial",
data = glad_coping_participation_raw)
#Check output
summary(full_LR_model)
