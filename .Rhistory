dim()
exclude_cols_numeric <- c(
"ID",
"sample",
"startDate",
"endDate"
)
coping_nbr_dat_id <- coping_nbr_dat %>% #new dataset with ID
drop_na(subjectid) %>% # Drop participants with no ID
distinct(subjectid,
.keep_all = TRUE) %>% # Remove duplicate IDs
add_column(sample = "NBR",
.after = "subjectid") %>% # Create new sample column
select(
ID = subjectid, # ID
sample,
startDate,
endDate,
swb.in_general_how_happy_are_you_cop = swb.in_general_how_happy_are_you,
swb.happy_general_health_cop = swb.happy_general_health,
swb.extent_meaningful_life_feel_cop = swb.meaningful_extent_life_feel
) %>%
add_numeric(exclude = exclude_cols_numeric)
# Inspect colnames
coping_nbr_dat_id %>%
colnames()
# Inspect dimensions of new data set
coping_nbr_dat_id %>%
dim()
# Inspect number of rows dropped
coping_nbr_excluded <- dim(coping_nbr_dat_id)[1] - dim(coping_nbr_dat)[1]
coping_nbr_excluded
coping_nbr_dat_id %>%
select(all_of(ends_with("numeric"))) %>%
tbl_summary(missing_text = "Missing")
coping_nbr_miss_map <- coping_nbr_dat_id %>%
missmap()
coping_nbr_miss_map
dat <- glad_dat_id %>%
bind_rows(edgi_dat_id)
#Check
dat %>%
glimpse()
dat <- dat %>%
mutate(across(ends_with("numeric"),
~case_when(
. == -55 ~ -555,
. == -77 ~ -777,
. == -88 ~ -888,
. == -99 ~ -999,
TRUE ~ .)))
values_categorical <- c(
"Prefer not to answer",
"Do not know",
"Seen but not answered",
"Extremely unhappy",
"Very unhappy",
"Moderately unhappy",
"Moderately happy",
"Very happy",
"Extremely happy",
"Not at all",
"A little",
"A moderate amount",
"very much",
"An extreme amount",
NA_real_
)
values_categorical
variables_categorical <-
c(
"swb.in_general_how_happy_are_you",
"swb.happy_general_health",
"swb.meaningful_extent_feel_life"
)
variables_categorical
imp_check(data = dat,
variables = variables_categorical,
values = values_categorical)
values_numeric <- c(
-999,
-888,
-777,
0,
1,
2,
3,
4,
5,
NA_real_
)
values_numeric
variables_numeric <-
c(
"swb.in_general_how_happy_are_you_numeric",
"swb.happy_general_health_numeric",
"swb.meaningful_extent_feel_life_numeric"
)
variables_numeric
imp_check(data = dat,
variables = variables_numeric,
values = values_numeric)
knitr::opts_chunk$set(
echo = TRUE,
comment = '',
prompt = FALSE,
cache = FALSE
)
remove(list = ls())
source(file = "../functions/add_numeric.R")
source(file = "../functions/sumscores.R")
source(file = "../functions/package_check.R")
source(file = "../functions/imp_check.R")
packages <- c("summarytools", "sjlabelled", "Amelia", "gtsummary", "tidyverse")
package_check(packages)
date <- Sys.Date()
date
source(file = "../credentials/paths.R")
glad_dat <- read_rds(
file = paste0(ilovedata, "/data_raw/latest_freeze/glad/swb_glad.rds")
)
# Check variable names in dataframe
glad_dat %>%
colnames()
# Inspect dimensions of dataframe
glad_dat %>%
dim()
exclude_cols_numeric <- c(
"ID",
"sample",
"startDate",
"endDate"
)
glad_dat_id <- glad_dat %>% #new dataset with ID
drop_na(externalDataReference) %>% # Drop participants with no ID
distinct(externalDataReference,
.keep_all = TRUE) %>% # Remove duplicate IDs
add_column(sample = "GLAD",
.after = "externalDataReference") %>% # Create new sample column
select(
ID = externalDataReference, # ID
sample,
startDate,
endDate,
swb.in_general_how_happy_are_you,
swb.happy_general_health,
swb.meaningful_extent_feel_life
) %>%
add_numeric(exclude = exclude_cols_numeric)
# Inspect colnames
glad_dat_id %>%
colnames()
# Inspect dimensions of new data set
glad_dat_id %>%
dim()
# Inspect number of rows dropped
glad_excluded <- dim(glad_dat_id)[1] - dim(glad_dat)[1]
glad_excluded
glad_dat_id %>%
select(all_of(ends_with("numeric"))) %>%
tbl_summary(missing_text = "Missing")
glad_miss_map <- glad_dat_id %>%
missmap()
glad_miss_map
edgi_dat <- read_rds(
file = paste0(ilovedata, "/data_raw/latest_freeze/edgi_optional/tb_edgi_optional.rds")
)
# Check variable names in dataframe
edgi_dat %>%
colnames()
# Inspect dimensions of dataframe
edgi_dat %>%
dim()
setdiff(colnames(glad_dat), colnames(edgi_dat))
exclude_cols_numeric <- c(
"ID",
"sample",
"startDate",
"endDate"
)
edgi_dat_id <- edgi_dat %>% #new dataset with ID
drop_na(externalDataReference) %>% # Drop participants with no ID
distinct(externalDataReference,
.keep_all = TRUE) %>% # Remove duplicate IDs
add_column(sample = "EDGI",
.after = "externalDataReference") %>% # Create new sample column
select(
ID = externalDataReference, # ID
sample,
startDate,
endDate, #Match GLAD/EDGI swb names (below)
swb.in_general_how_happy_are_you = tb.in_general_how_happy_are_you,
swb.happy_general_health = tb.general_happy_health,
swb.meaningful_extent_feel_life = tb.meaningful_extent_life_feel
) %>%
add_numeric(exclude = exclude_cols_numeric)
# Inspect colnames
edgi_dat_id %>%
colnames()
# Inspect dimensions of new data set
edgi_dat_id %>%
dim()
# Inspect number of rows dropped
edgi_excluded <- dim(edgi_dat_id)[1] - dim(edgi_dat)[1]
edgi_excluded
edgi_dat_id %>%
select(all_of(ends_with("numeric"))) %>%
tbl_summary(missing_text = "Missing")
edgi_miss_map <- edgi_dat_id %>%
missmap()
edgi_miss_map
coping_edgi_dat <- read_rds(
file = paste0(ilovedata, "/data_raw/latest_freeze/coping_edgi/swb_coping_edgi.rds")
)
# Check variable names in dataframe
coping_edgi_dat %>%
colnames()
# Inspect dimensions of dataframe
coping_edgi_dat %>%
dim()
exclude_cols_numeric <- c(
"ID",
"sample",
"startDate",
"endDate"
)
coping_edgi_dat_id <- coping_edgi_dat %>% #new dataset with ID
drop_na(externalDataReference) %>% # Drop participants with no ID
distinct(externalDataReference,
.keep_all = TRUE) %>% # Remove duplicate IDs
add_column(sample = "EDGI",
.after = "externalDataReference") %>% # Create new sample column
select(
ID = externalDataReference, # ID
sample,
startDate,
endDate, #Add _cop and rename to match GLAD signup swb
swb.in_general_how_happy_are_you_cop = swb.in_general_how_happy_are_you,
swb.happy_general_health_cop = swb.happy_general_health,
swb.meaningful_extent_feel_life_cop = swb.extent_meaningful_life_feel
) %>%
add_numeric(exclude = exclude_cols_numeric)
# Inspect colnames
coping_edgi_dat_id %>%
colnames()
edgi_dat <- read_rds(
file = paste0(ilovedata, "/data_raw/latest_freeze/edgi_optional/tb_edgi_optional.rds")
)
# Inspect dimensions of dataframe
edgi_dat %>%
dim()
setdiff(colnames(glad_dat), colnames(edgi_dat))
exclude_cols_numeric <- c(
"ID",
"sample",
"startDate",
"endDate"
)
edgi_dat_id <- edgi_dat %>% #new dataset with ID
drop_na(externalDataReference) %>% # Drop participants with no ID
distinct(externalDataReference,
.keep_all = TRUE) %>% # Remove duplicate IDs
add_column(sample = "EDGI",
.after = "externalDataReference") %>% # Create new sample column
select(
ID = externalDataReference, # ID
sample,
startDate,
endDate, #Match GLAD/EDGI swb names (below)
swb.in_general_how_happy_are_you = tb.in_general_how_happy_are_you,
swb.happy_general_health = tb.general_happy_health,
swb.meaningful_extent_feel_life = tb.meaningful_extent_life_feel
) %>%
add_numeric(exclude = exclude_cols_numeric)
# Inspect colnames
edgi_dat_id %>%
colnames()
# Inspect dimensions of new data set
edgi_dat_id %>%
dim()
# Inspect number of rows dropped
edgi_excluded <- dim(edgi_dat_id)[1] - dim(edgi_dat)[1]
edgi_excluded
coping_edgi_dat <- read_rds(
file = paste0(ilovedata, "/data_raw/latest_freeze/coping_edgi/swb_coping_edgi.rds")
)
# Check variable names in dataframe
coping_edgi_dat %>%
colnames()
# Inspect dimensions of dataframe
coping_edgi_dat %>%
dim()
exclude_cols_numeric <- c(
"ID",
"sample",
"startDate",
"endDate"
)
# Inspect colnames
coping_edgi_dat_id %>%
colnames()
coping_edgi_dat_id <- coping_edgi_dat %>% #new dataset with ID
drop_na(externalDataReference) %>% # Drop participants with no ID
distinct(externalDataReference,
.keep_all = TRUE) %>% # Remove duplicate IDs
add_column(sample = "EDGI",
.after = "externalDataReference") %>% # Create new sample column
select(
ID = externalDataReference, # ID
sample,
startDate,
endDate, #Add _cop and rename to match GLAD signup swb
swb.in_general_how_happy_are_you_cop = swb.in_general_how_happy_are_you,
swb.happy_general_health_cop = swb.happy_general_health,
swb.meaningful_extent_feel_life_cop = swb.extent_meaningful_life_feel
) %>%
add_numeric(exclude = exclude_cols_numeric)
# Inspect colnames
coping_edgi_dat_id %>%
colnames()
coping_nbr_dat <- read_rds(
file = paste0(ilovedata, "/data_raw/latest_freeze/coping_nbr/swb_coping_nbr.rds")
)
# Check variable names in dataframe
coping_nbr_dat %>%
colnames()
# Inspect dimensions of dataframe
coping_nbr_dat %>%
dim()
exclude_cols_numeric <- c(
"ID",
"sample",
"startDate",
"endDate"
)
coping_nbr_dat_id <- coping_nbr_dat %>% #new dataset with ID
drop_na(subjectid) %>% # Drop participants with no ID
distinct(subjectid,
.keep_all = TRUE) %>% # Remove duplicate IDs
add_column(sample = "NBR",
.after = "subjectid") %>% # Create new sample column
select(
ID = subjectid, # ID
sample,
startDate,
endDate,
swb.in_general_how_happy_are_you_cop = swb.in_general_how_happy_are_you,
swb.happy_general_health_cop = swb.happy_general_health,
swb.extent_meaningful_life_feel_cop = swb.meaningful_extent_life_feel
) %>%
add_numeric(exclude = exclude_cols_numeric)
# Inspect colnames
coping_nbr_dat_id %>%
colnames()
coping_nbr_dat_id <- coping_nbr_dat %>% #new dataset with ID
drop_na(subjectid) %>% # Drop participants with no ID
distinct(subjectid,
.keep_all = TRUE) %>% # Remove duplicate IDs
add_column(sample = "NBR",
.after = "subjectid") %>% # Create new sample column
select(
ID = subjectid, # ID
sample,
startDate,
endDate,
swb.in_general_how_happy_are_you_cop = swb.in_general_how_happy_are_you,
swb.happy_general_health_cop = swb.happy_general_health,
swb.meaningful_extent_feel_life_cop = swb.meaningful_extent_life_feel
) %>%
add_numeric(exclude = exclude_cols_numeric)
# Inspect colnames
coping_nbr_dat_id %>%
colnames()
# Inspect dimensions of new data set
coping_nbr_dat_id %>%
dim()
# Inspect number of rows dropped
coping_nbr_excluded <- dim(coping_nbr_dat_id)[1] - dim(coping_nbr_dat)[1]
coping_nbr_excluded
coping_nbr_miss_map <- coping_nbr_dat_id %>%
missmap()
coping_nbr_miss_map
dat <- glad_dat_id %>%
bind_rows(edgi_dat_id)
#Check
dat %>%
glimpse()
dat <- dat %>%
mutate(across(ends_with("numeric"),
~case_when(
. == -55 ~ -555,
. == -77 ~ -777,
. == -88 ~ -888,
. == -99 ~ -999,
TRUE ~ .)))
values_categorical <- c(
"Prefer not to answer",
"Do not know",
"Seen but not answered",
"Extremely unhappy",
"Very unhappy",
"Moderately unhappy",
"Moderately happy",
"Very happy",
"Extremely happy",
"Not at all",
"A little",
"A moderate amount",
"very much",
"An extreme amount",
NA_real_
)
variables_categorical <-
c(
"swb.in_general_how_happy_are_you",
"swb.happy_general_health",
"swb.meaningful_extent_feel_life"
)
imp_check(data = dat,
variables = variables_categorical,
values = values_categorical)
values_numeric <- c(
-999,
-888,
-777,
0,
1,
2,
3,
4,
5,
NA_real_
)
values_numeric
```{r vector numeric variables}
variables_numeric <-
c(
"swb.in_general_how_happy_are_you_numeric",
"swb.happy_general_health_numeric",
"swb.meaningful_extent_feel_life_numeric"
)
imp_check(data = dat,
variables = variables_numeric,
values = values_numeric)
dat <- dat %>%
bind_rows(coping_edgi_dat)
dat <- dat %>%
bind_rows(coping_edgi_dat_id)
#Check
dat %>%
glimpse()
dat <- dat %>%
bind_rows(coping_nbr_dat_id)
#Check
dat %>%
glimpse()
dat <- dat %>%
mutate(across(ends_with("numeric"),
~case_when(
. == -55 ~ -555,
. == -77 ~ -777,
. == -88 ~ -888,
. == -99 ~ -999,
TRUE ~ .)))
values_categorical <- c(
"Prefer not to answer",
"Do not know",
"Seen but not answered",
"Extremely unhappy",
"Very unhappy",
"Moderately unhappy",
"Moderately happy",
"Very happy",
"Extremely happy",
"Not at all",
"A little",
"A moderate amount",
"very much",
"An extreme amount",
NA_real_
)
variables_categorical <-
c(
"swb.in_general_how_happy_are_you",
"swb.happy_general_health",
"swb.meaningful_extent_feel_life"
)
imp_check(data = dat,
variables = variables_categorical,
values = values_categorical)
values_numeric <- c(
-999,
-888,
-777,
0,
1,
2,
3,
4,
5,
NA_real_
)
variables_numeric <-
c(
"swb.in_general_how_happy_are_you_numeric",
"swb.happy_general_health_numeric",
"swb.meaningful_extent_feel_life_numeric"
)
imp_check(data = dat,
variables = variables_numeric,
values = values_numeric)
colnames(dat)
