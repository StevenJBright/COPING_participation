scale_y_continuous(limits = c(0, 2000),
breaks = seq(0, 2000, 500)) +
geom_text(aes(y = ..prop..,
label = ..count..),
stat = "count",
vjust = -1,
nudge_y = .01) +
theme_bw()
glad_coping_participation %>%
drop_na(total_COPING_waves) %>%
ggplot(aes(x = total_COPING_waves)) +
geom_bar(fill = glad_colour,
colour = "black") +
labs(#title = "Distribution of completed follow-up surveys amongst GLAD Study participants",
#subtitle = paste0("No. of pt's who completed at least one follow-up: ", N_followups),
#caption = paste0("No. of pt's completing no surveys: ", N_no_followups),
y = "N",
x = "No. of surveys completed") +
scale_x_continuous(limits = c(NA, NA),
breaks = seq(0, 14, 1)) +
scale_y_continuous(limits = c(0, 2000),
breaks = seq(0, 2000, 500)) +
geom_text(aes(y = ..prop..,
label = ..count..),
stat = "count",
vjust = -1,
nudge_y = .01) +
theme_bw() +
theme(axis.text.x = element_text(colour = "black"),
axis.text.y = element_text(colour = "black"))
COPING_followups_completed_plot <- glad_coping_participation %>%
drop_na(total_COPING_waves) %>%
ggplot(aes(x = total_COPING_waves)) +
geom_bar(fill = glad_colour,
colour = "black") +
labs(#title = "Distribution of completed follow-up surveys amongst GLAD Study participants",
#subtitle = paste0("No. of pt's who completed at least one follow-up: ", N_followups),
#caption = paste0("No. of pt's completing no surveys: ", N_no_followups),
y = "N",
x = "No. of surveys completed") +
scale_x_continuous(limits = c(NA, NA),
breaks = seq(0, 14, 1)) +
scale_y_continuous(limits = c(0, 2000),
breaks = seq(0, 2000, 500)) +
geom_text(aes(y = ..prop..,
label = ..count..),
stat = "count",
vjust = -1,
nudge_y = .01) +
theme_bw() +
theme(axis.text.x = element_text(colour = "black"),
axis.text.y = element_text(colour = "black"))
COPING_followups_completed_plot
ggsave("../COPING_followups_completed.png",
path = figure_path,
plot = COPING_followups_completed_plot,
width = 10,
height = 6,
dpi = 150,
units = "in")
ggsave("../COPING_followups_completed.png",
plot = COPING_followups_completed_plot,
width = 10,
height = 6,
dpi = 150,
units = "in")
knitr::opts_chunk$set(echo = TRUE)
remove(list = ls())
#Change it to "= 0" to turn it back on
options(scipen = 999)
#install.packages("broom")
#install.packages("knitr)
#install.packages("car")
#install.packages("rstatix")
#install.packages("pscl")
#install.packages("boot")
#install.packages("stats")
#install.packages("rcompanion")
#install.packages("MASS")
#install.packages("openxlsx")
#install.packages("tidyverse")
library(broom)
library(knitr)
library(car)
library(rstatix)
library(pscl)
library(boot)
library(stats)
library(rcompanion)
library(MASS)
library(openxlsx)
library(tidyverse)
source("..//COPING_participation_paths.r")
source("..//COPING_participation_functions.r")
glad_coping_participation <- read_rds(paste0(processed_data_path, processed_data_name))
#Check data
glad_coping_participation %>%
head()
#Create explanatory variables vector
explanatory_variables <- c(
"age_cleaned",
"gender_recode_labelled",
"highest_education_labelled",
"ethnicity_labelled",
"employment_labelled",
"partnership_status_labelled",
"phq.sum_score",
"gad.sum_score",
"audit.sum_score",
"smoking_status_labelled",
"physical_health_comorbidities_labelled",
"MH_disorders_total_count",
"depressive_and_anxiety_comorbidity_labelled",
"eating_disorders_labelled",
"OCRDs_labelled",
"psychotic_and_biploar_disorder_labelled",
"asd_labelled",
"ADHD_ADD_labelled",
"personality_disorder_labelled",
#"PTSD_labelled", # Hasing this out because it turns to NA in models after adding anx/dep comorbidity
"startDate",
"kit_returned_labelled"
#joined_coping_first_invitation_labelled,
)
#Create dependent variable vectors
coping_baseline_outcome <- c("completed_baseline_labelled")
coping_followups_outcome <- c("total_COPING_waves")
providing_kit_outcome <- c("kit_returned_labelled")
ZINB_model1_variables <- c(
"age_cleaned",
"gender_recode_labelled",
"highest_education_labelled",
"ethnicity_labelled",
"employment_labelled",
"partnership_status_labelled",
"phq.sum_score",
"gad.sum_score",
"audit.sum_score",
"smoking_status_labelled",
"physical_health_comorbidities_labelled",
"MH_disorders_total_count",
"depressive_and_anxiety_comorbidity_labelled",
"eating_disorders_labelled",
"OCRDs_labelled",
"psychotic_and_biploar_disorder_labelled",
"asd_labelled",
"ADHD_ADD_labelled",
"personality_disorder_labelled",
#"PTSD_labelled", #Causes an error after adding anx/dep comorbidity variable
"kit_returned_labelled"
#"startDate" #Throws error
)
#Explanatory variables for exploratory models
##Exploratory model 1: Without the saliva kit variable
exploratory_ZINB_model1_variables <- ZINB_model1_variables %>%
str_subset(pattern = "kit_returned_labelled",
negate = TRUE)
##Exploratory model 2: Only pt's who have provided a saliva kit
exploratory_ZINB_model2_variables <- exploratory_ZINB_model1_variables
#Main aim1 formula
aim1_baseline_participation_formula <- as.formula(paste(coping_baseline_outcome,
paste(explanatory_variables,
collapse=" + "),
sep = " ~ "))
#Exploratory aim1 formulas
##Exploratory model 1: Omitting the saliva kit variable
exploratory_LR_model1_explan_vars <- explanatory_variables %>%
str_subset(pattern = "kit_returned_labelled",
negate = TRUE)
exploratory_LR_model1_formula <- as.formula(paste(coping_baseline_outcome,
paste(exploratory_LR_model1_explan_vars,
collapse=" + "),
sep = " ~ "))
##Exploratory model 2: Only participants who have returned a saliva kit
exploratory_LR_model2_explan_vars <- explanatory_variables %>%
str_subset(pattern = "kit_returned_labelled",
negate = TRUE)
exploratory_LR_model2_formula <- as.formula(paste(coping_baseline_outcome,
paste(exploratory_LR_model2_explan_vars,
collapse=" + "),
sep = " ~ "))
##Exploratory model 3: Providing a saliva kit as the outcome variable
exploratory_LR_model3_explan_vars <- explanatory_variables %>%
str_subset(pattern = "kit_returned_labelled",
negate = TRUE)
exploratory_LR_model3_formula <- as.formula(paste(providing_kit_outcome,
paste(exploratory_LR_model3_explan_vars,
collapse=" + "),
sep = " ~ "))
#Explanatory aim2 model formulas
##Explanatory model 1: Without the saliva kit variable
exploratory_ZINB_model1_exclude_vars <- c("kit_returned_labelled|startDate")
exploratory_ZINB_model1_explan_vars <- explanatory_variables %>%
str_subset(pattern = exploratory_ZINB_model1_exclude_vars,
negate = TRUE)
exploratory_ZINB_model1_formula <- as.formula(paste(coping_baseline_outcome,
paste(exploratory_ZINB_model1_explan_vars,
collapse=" + "),
sep = " ~ "))
##Explanatory model 2: Only pt's who returned their saliva kit
exploratory_ZINB_model2_formula <- exploratory_ZINB_model1_formula
aim1_LR_model_names <- c(
"Intercept",
"age_cleaned",
"gender_recode_labelledFemale",
"gender_recode_labelledNon-binary/prefer to self-define",
"highest_education_labelledA levels/AS levels or equivalent",
"highest_education_labelledO levels/GCSEs or CSEs or equivalent",
"highest_education_labelledNVQ or HND or HNC or equivalent",
"highest_education_labelledNone of the above",
"ethnicity_labelledMixed",
"ethnicity_labelledAsian or Asian British",
"ethnicity_labelledBlack or Black British",
"ethnicity_labelledArab",
"ethnicity_labelledOther",
"employment_labelledRetired",
"employment_labelledLooking after home and/or family",
"employment_labelledUnable to work because of sickness or disability",
"employment_labelledUnemployed",
"employment_labelledDoing unpaid or voluntary work",
"employment_labelledFull or part-time_student",
"employment_labelledNone of the above",
"partnership_status_labelledRelationship or married/civil partnership",
"partnership_status_labelledDivorced/widowed/separated",
"phq.sum_score",
"gad.sum_score",
"audit.sum_score",
"smoking_status_labelledI smoke now",
"smoking_status_labelledI used to smoke",
"physical_health_comorbidities_labelled1 physical health disorder",
"physical_health_comorbidities_labelled2+ physical health disorders",
"MH_disorders_total_count",
"depressive_and_anxiety_comorbidity_labelledNo depressive and anxiety disorder",
"depressive_and_anxiety_comorbidity_labelledDepressive disorder only",
"depressive_and_anxiety_comorbidity_labelledAnxiety disorder only",
"eating_disorders_labelledEating disorder",
"OCRDs_labelledOCRDs",
"psychotic_and_biploar_disorder_labelledPsychotic and bipolar disorder",
"psychotic_and_biploar_disorder_labelledOnly psychotic disorder",
"psychotic_and_biploar_disorder_labelledOnly bipolar disorder",
"asd_labelledAutistic spectrum disorder",
"ADHD_ADD_labelledADHD or ADD disorder",
"mhd.personality_disorder_labelledPersonality disorder",
#"PTSD_labelledPost-traumatic stress disorder", # turns to NA in models after adding anx/dep comorbidity
"startDate",
"kit_returnedPt has provided saliva kit"
#"joined_coping_first_invitationCompleted COPING baseline before 1st follow-up"
)
#Exploratory model 1: Remove the saliva kit provided variable
exploratory_LR_model1_names <- aim1_LR_model_names %>%
str_subset(pattern = "kit_returnedPt has provided saliva kit",
negate = TRUE)
#Exploratory model 2: Only pt's who have provided a saliva kit
exploratory_LR_model2_names <- exploratory_LR_model1_names
#Exploratory model 3: Providing a saliva kit as the outcome variable
exploratory_LR_model3_names <- exploratory_LR_model1_names
glad_coping_participation_returned_kit <- glad_coping_participation %>%
filter(kit_returned == 1)
#We want the depression/anxiety comorbidity to be the reference group because it has the largest N
##Full sample
glad_coping_participation$depressive_and_anxiety_comorbidity_labelled <- relevel(glad_coping_participation$depressive_and_anxiety_comorbidity_labelled,
ref = "Depressive and anxiety disorder")
##Pt's who have provided a kit
glad_coping_participation_returned_kit$depressive_and_anxiety_comorbidity_labelled <- relevel(glad_coping_participation_returned_kit$depressive_and_anxiety_comorbidity_labelled,
ref = "Depressive and anxiety disorder")
#Create p-value and no. of test objects
standard_p_value_level <- 0.05
aim1_model_n_tests <- 42
aim2_model_n_tests <- 41
exploratory_ZINB_model_n_tests <- 40
#Create adjusted p value thresholds
aim1_adjusted_sig_threshold <- format.pval(pv = standard_p_value_level / aim1_model_n_tests,
digits = 3)
aim2_adjusted_sig_threshold <- format.pval(pv = standard_p_value_level / aim2_model_n_tests,
digits = 3)
exploratory_ZINB_adjusted_sig_threshold <- format.pval(pv = standard_p_value_level / exploratory_ZINB_model_n_tests,
digits = 3)
#Check thresholds
aim1_adjusted_sig_threshold
aim2_adjusted_sig_threshold #Exploratory LR model 1 and 2 will also use same threshold
exploratory_ZINB_adjusted_sig_threshold
aim1_LR_model <- glm(
formula = aim1_baseline_participation_formula,
family = "binomial",
data = glad_coping_participation)
#Check output
summary(aim1_LR_model)
# Create complete case dataset
glad_coping_participation_complete_case <- glad_coping_participation %>%
select(all_of(explanatory_variables)) %>%
na.omit()
# Check
glad_coping_participation_complete_case %>%
dim()
# Save the logodds of the outcome variable
logodds <- aim1_LR_model$linear.predictors
# Perform Box-Tidwell test
boxTidwell(logodds ~ age_cleaned,
data = glad_coping_participation_complete_case
)
glad_coping_participation_complete_case %>%
colnames()
data_for_BoxTidwell <- glad_coping_participation_complete_case %>%
mutate(across(c(
"phq.sum_score",
"gad.sum_score",
"audit.sum_score",
"MH_disorders_total_count"
),
~ .x + 1))
continuous_vars[-1]
# Create vector of continuous variables used in ZINB model
continuous_vars <- c(
"age_cleaned",
"phq.sum_score",
"gad.sum_score",
"audit.sum_score",
"MH_disorders_total_count"
)
continuous_vars[-1]
# Create complete case dataset
glad_coping_participation_complete_case <- glad_coping_participation %>%
select(all_of(explanatory_variables)) %>%
na.omit()
# Check
glad_coping_participation_complete_case %>%
dim()
# Check
data_for_BoxTidwell %>%
select(all_of(continuous_vars)) %>%
map(~ data_for_BoxTidwell %>%
count(.x))
# Check
data_for_BoxTidwell %>%
select(all_of(continuous_vars)) %>%
map(~ data_for_BoxTidwell %>%
count({{ .x }}))
# Create complete case dataset
glad_coping_participation_complete_case <- glad_coping_participation %>%
select(all_of(explanatory_variables)) %>%
na.omit()
# Check
glad_coping_participation_complete_case %>%
dim()
data_for_BoxTidwell <- glad_coping_participation_complete_case %>%
mutate(across(continuous_vars[-1],
~ .x + 1)
)
# Check
data_for_BoxTidwell %>%
select(all_of(continuous_vars)) %>%
map(~ data_for_BoxTidwell %>%
count({{ .x }}))
# Save the logodds of the outcome variable
logodds <- aim1_LR_model$linear.predictors
# Perform Box-Tidwell test
boxTidwell(logodds ~ age_cleaned +
phq.sum_score +
gad.sum_score +
audit.sum_score +
MH_disorders_total_count,
data = data_for_BoxTidwell
)
sum(is.na(data_for_BoxTidwell))
# Perform Box-Tidwell test
boxTidwell(logodds ~ age_cleaned +
phq.sum_score +
gad.sum_score +
audit.sum_score +
MH_disorders_total_count,
data = data_for_BoxTidwell
)
# Create complete case dataset
glad_coping_participation_complete_case <- glad_coping_participation %>%
select(all_of(explanatory_variables)) %>%
na.omit()
# Check
glad_coping_participation_complete_case %>%
dim()
# Increment sum score variables and total MH disorders by 1
data_for_BoxTidwell <- glad_coping_participation_complete_case %>%
mutate(across(continuous_vars[-1],
~ .x + 1)
)
# Check
data_for_BoxTidwell %>%
select(all_of(continuous_vars)) %>%
map(~ data_for_BoxTidwell %>%
count({{ .x }}))
# Check
data_for_BoxTidwell %>%
select(all_of(continuous_vars[-1])) %>%
map(~ data_for_BoxTidwell %>%
count({{ .x }}))
# Save the logodds of the outcome variable
logodds <- aim1_LR_model$linear.predictors
# Perform Box-Tidwell test
boxTidwell(logodds ~ age_cleaned +
phq.sum_score +
gad.sum_score +
audit.sum_score +
MH_disorders_total_count,
data = data_for_BoxTidwell
)
# Perform Box-Tidwell test
boxTidwell(logodds ~ age_cleaned +
#phq.sum_score +
gad.sum_score +
audit.sum_score +
MH_disorders_total_count,
data = data_for_BoxTidwell
)
# Perform Box-Tidwell test
boxTidwell(logodds ~ age_cleaned +
#phq.sum_score +
#gad.sum_score +
audit.sum_score +
MH_disorders_total_count,
data = data_for_BoxTidwell
)
# Perform Box-Tidwell test
boxTidwell(logodds ~ age_cleaned +
phq.sum_score +
#gad.sum_score +
audit.sum_score +
MH_disorders_total_count,
data = data_for_BoxTidwell
)
# Perform Box-Tidwell test
boxTidwell(logodds ~ age_cleaned +
#phq.sum_score +
gad.sum_score +
audit.sum_score +
MH_disorders_total_count,
data = data_for_BoxTidwell
)
# Perform Box-Tidwell test
boxTidwell(logodds ~ age_cleaned +
#phq.sum_score +
#gad.sum_score +
audit.sum_score +
MH_disorders_total_count,
data = data_for_BoxTidwell
)
boxTidwell(logodds ~ phq.sum_score,
data = data_for_BoxTidwell)
# Perform Box-Tidwell test
boxTidwell(logodds ~ age_cleaned +
#phq.sum_score +
#gad.sum_score +
audit.sum_score +
MH_disorders_total_count,
data = data_for_BoxTidwell
)
logit_age_plot <- glad_coping_participation_complete_case %>%
ggplot(aes(x = age_cleaned, y = logodds)) +
geom_point(colour = "Black") +
theme_minimal() +
labs(x = "Age") +
theme(axis.text.x = element_text(colour = "black"),
axis.text.y = element_text(colour = "black"))
logit_age_plot
# Perform Box-Tidwell test
boxTidwell(logodds ~ age_cleaned +
#phq.sum_score +
#gad.sum_score +
#audit.sum_score +
#MH_disorders_total_count,
data = data_for_BoxTidwell
# Perform Box-Tidwell test
boxTidwell(logodds ~ age_cleaned,
#phq.sum_score +
#gad.sum_score +
#audit.sum_score +
#MH_disorders_total_count,
data = data_for_BoxTidwell
)
# Perform Box-Tidwell test
boxTidwell(logodds ~ age_cleaned,
#phq.sum_score +
#gad.sum_score +
#audit.sum_score +
#MH_disorders_total_count,
data = data_for_BoxTidwell
)
# Perform Box-Tidwell test
boxTidwell(logodds ~ age_cleaned +
#phq.sum_score +
#gad.sum_score +
audit.sum_score +
MH_disorders_total_count,
data = data_for_BoxTidwell
)
# Perform Box-Tidwell test
boxTidwell(logodds ~ age_cleaned,
data = data_for_BoxTidwell)
# Perform Box-Tidwell test
boxTidwell(logodds ~ age_cleaned,
data = data_for_BoxTidwell)
# Save the logodds of the outcome variable
logodds <- aim1_LR_model$linear.predictors
# Perform Box-Tidwell test
boxTidwell(logodds ~ age_cleaned,
data = data_for_BoxTidwell)
boxTidwell(logodds ~ phq.sum_score,
data = data_for_BoxTidwell)
boxTidwell(logodds ~ gad.sum_score,
data = data_for_BoxTidwell)
boxTidwell(logodds ~ audit.sum_score,
data = data_for_BoxTidwell)
boxTidwell(logodds ~ MH_disorders_total_count,
data = data_for_BoxTidwell)
