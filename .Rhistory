hetcor(use = "pairwise.complete.obs")
all.corr.matrix <- as.matrix(all.corr.mat)
all.p.matrix <- as.matrix(all.corr.mat$tests)
all.corr.matrix %>%
corrplot(method = "color", # objects to represent the correlations on plot
type = "lower", # only use the lower triangle of the matrix
diag = FALSE, # do not show the correlations on the diagonal
addgrid.col = NA,
addCoef.col = "black", # colour for the correlation coefficients in the plot
tl.cex = 0.8, #size of text
tl.col = "black",
col=colorRampPalette(c("dodgerblue4",
"white",
"firebrick4"))(200), # colours for correlations
# Combine with significance
p.mat = all.p.matrix, # Matrix with p values
sig.level = 0.01, # Choose significant level
insig = "blank") # Nonsignificant correlations have no colour
linear_plot <- function(df, IV, DV){
df %>%
ggplot(aes(y = DV, x = IV)) +
geom_point(position = position_jitter(w = 0.1, h = 0.1),
alpha = 0.3) +
geom_smooth(method = lm, se = TRUE, col="black") +
theme(panel.grid.major.y = element_line(size = 0.5,
linetype = 'dashed',
colour = "gray"),
axis.text.x = element_text(colour="black", size = 12),
axis.text.y = element_text(colour="black", size = 12),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_blank())
}
correlation_vars %>%
map(linear_plot,
df = glad_coping_participation_raw,
DV = completed_baseline)
correlation_vars %>%
map(linear_plot,
df = glad_coping_participation_raw,
DV = glad_coping_participation_raw$completed_baseline)
linear_plot <- function(df, IV, DV){
df %>%
ggplot(aes(y = DV[[]], x = df[[IV]])) +
geom_point(position = position_jitter(w = 0.1, h = 0.1),
alpha = 0.3) +
geom_smooth(method = lm, se = TRUE, col="black") +
theme(panel.grid.major.y = element_line(size = 0.5,
linetype = 'dashed',
colour = "gray"),
axis.text.x = element_text(colour="black", size = 12),
axis.text.y = element_text(colour="black", size = 12),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_blank())
}
correlation_vars %>%
map(linear_plot,
df = glad_coping_participation_raw,
DV = "completed_baseline")
correlation_vars
#Get IV variable names without Intercept and startDate
Linear_relationship_vars <- correlation_vars %>%
colnames()
Linear_relationship_vars
#Get IV variable names without Intercept and startDate
linear_relationship_vars <- correlation_vars %>%
colnames()
linear_relationship_vars %>%
map(linear_plot,
df = glad_coping_participation_raw,
DV = "completed_baseline")
linear_relationship_vars %>%
map(linear_plot,
df = glad_coping_participation_raw,
DV = "completed_baseline")
linear_relationship_vars %>%
map(linear_plot,
df = glad_coping_participation_raw,
DV = "completed_baseline")
df %>%
ggplot(aes(y = DV_data, x = IV_data)) +
geom_point(position = position_jitter(w = 0.1, h = 0.1),
alpha = 0.3) +
geom_smooth(method = lm, se = TRUE, col="black") +
theme(panel.grid.major.y = element_line(size = 0.5,
linetype = 'dashed',
colour = "gray"),
axis.text.x = element_text(colour="black", size = 12),
axis.text.y = element_text(colour="black", size = 12),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_blank())
linear_plot <- function(df, IV, DV){
IV_data <- df[[IV]]
DV_data <- df[[DV]]
df %>%
ggplot(aes(y = DV_data, x = IV_data)) +
geom_point(position = position_jitter(w = 0.1, h = 0.1),
alpha = 0.3) +
geom_smooth(method = lm, se = TRUE, col="black") +
theme(panel.grid.major.y = element_line(size = 0.5,
linetype = 'dashed',
colour = "gray"),
axis.text.x = element_text(colour="black", size = 12),
axis.text.y = element_text(colour="black", size = 12),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_blank())
}
linear_relationship_vars %>%
map(linear_plot,
df = glad_coping_participation_raw,
DV = "completed_baseline")
df %>%
ggplot(aes(y = DV_data, x = IV_data)) +
geom_point(position = position_jitter(w = 0.1, h = 0.1),
alpha = 0.3) +
geom_smooth(method = lm, se = TRUE, col="black") +
theme(panel.grid.major.y = element_line(size = 0.5,
linetype = 'dashed',
colour = "gray"),
axis.text.x = element_text(colour="black", size = 12),
axis.text.y = element_text(colour="black", size = 12),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_blank())
linear_plot <- function(df, IV, DV){
IV_data <- df[[IV]]
IV_data_NA_removed <- IV_data %>%
na.omit()
DV_data <- df[[DV]]
DV_data_NA_removed <- DV_data %>%
na.omit()
df %>%
ggplot(aes(y = DV_data, x = IV_data)) +
geom_point(position = position_jitter(w = 0.1, h = 0.1),
alpha = 0.3) +
geom_smooth(method = lm, se = TRUE, col="black") +
theme(panel.grid.major.y = element_line(size = 0.5,
linetype = 'dashed',
colour = "gray"),
axis.text.x = element_text(colour="black", size = 12),
axis.text.y = element_text(colour="black", size = 12),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_blank())
}
linear_relationship_vars %>%
map(linear_plot,
df = glad_coping_participation_raw,
DV = "completed_baseline")
glad_coping_participation_raw %>%
ggplot(aes(y = completed_baseline, x = age_cleaned)) +
geom_point(position = position_jitter(w = 0.1, h = 0.1),
alpha = 0.3) +
geom_smooth(method = lm, se = TRUE, col="black") +
theme(panel.grid.major.y = element_line(size = 0.5,
linetype = 'dashed',
colour = "gray"),
axis.text.x = element_text(colour="black", size = 12),
axis.text.y = element_text(colour="black", size = 12),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_blank())
linear_relationship_vars
?ggplot()
df %>%
ggplot(aes(y = DV_data, x = IV_data)) +
geom_point(position = position_jitter(w = 0.1, h = 0.1),
alpha = 0.3) +
geom_smooth(method = lm, se = TRUE, col="black") +
lab(y = DV,
x = IV) +
theme(panel.grid.major.y = element_line(size = 0.5,
linetype = 'dashed',
colour = "gray"),
axis.text.x = element_text(colour="black", size = 12),
axis.text.y = element_text(colour="black", size = 12),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_blank())
linear_plot <- function(df, IV, DV){
IV_data <- df[[IV]]
IV_data_NA_removed <- IV_data %>%
na.omit()
DV_data <- df[[DV]]
DV_data_NA_removed <- DV_data %>%
na.omit()
df %>%
ggplot(aes(y = DV_data, x = IV_data)) +
geom_point(position = position_jitter(w = 0.1, h = 0.1),
alpha = 0.3) +
geom_smooth(method = lm, se = TRUE, col="black") +
lab(y = DV,
x = IV) +
theme(panel.grid.major.y = element_line(size = 0.5,
linetype = 'dashed',
colour = "gray"),
axis.text.x = element_text(colour="black", size = 12),
axis.text.y = element_text(colour="black", size = 12),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_blank())
}
#Get IV variable names without Intercept and startDate
linear_relationship_vars <- correlation_vars %>%
colnames()
linear_relationship_vars %>%
map(linear_plot,
df = glad_coping_participation_raw,
DV = "completed_baseline")
linear_plot <- function(df, IV, DV){
IV_data <- df[[IV]]
IV_data_NA_removed <- IV_data %>%
na.omit()
DV_data <- df[[DV]]
DV_data_NA_removed <- DV_data %>%
na.omit()
df %>%
ggplot(aes(y = DV_data, x = IV_data)) +
geom_point(position = position_jitter(w = 0.1, h = 0.1),
alpha = 0.3) +
geom_smooth(method = lm, se = TRUE, col="black") +
labs(y = DV,
x = IV) +
theme(panel.grid.major.y = element_line(size = 0.5,
linetype = 'dashed',
colour = "gray"),
axis.text.x = element_text(colour="black", size = 12),
axis.text.y = element_text(colour="black", size = 12),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_blank())
}
#Get IV variable names without Intercept and startDate
linear_relationship_vars <- correlation_vars %>%
colnames()
linear_relationship_vars %>%
map(linear_plot,
df = glad_coping_participation_raw,
DV = "completed_baseline")
linear_relationship_vars %>%
map(linear_plot,
df = glad_coping_participation_raw,
DV = "total_COPING_waves")
sociodemographic_MLR_model <- glad_coping_participation_raw %>%
lm(total_COPING_waves ~ age_cleaned +
gender_recode +
highest_education +
dem.questions_based_ethnic_origin +
dem.what_is_your_current_employment_status +
partnership_status)
sociodemographic_MLR_model <- lm(total_COPING_waves ~ age_cleaned +
gender_recode +
highest_education +
dem.questions_based_ethnic_origin +
dem.what_is_your_current_employment_status +
partnership_status,
data = glad_coping_participation_raw)
#Check model output
summary(sociodemographic_MLR_model)
#Check model output
summary(sociodemographic_MLR_model)
Variable = sociodemographic_variable_names,
#Create tidy model output
sociodemographic_MLR_model_tidy <- tidy(
sociodemographic_MLR_model,
conf.int = T) %>%
mutate(
Variable = sociodemographic_variable_names,
Significance = if_else(
p.value < 0.05,
1,
0
) %>%
recode_factor(
"0" = "Not-significant",
"1" = "Significant"
)) %>%
select(
Variable,
estimate,
`CI 95% lower` = conf.low,
`CI 95% upper` = conf.high,
`p value` = p.value,
Significance
)
sociodemographic_LR_model_tidy %>%
head(7)
sociodemographic_MLR_model_tidy %>%
head(7)
#Create kable output
sociodemographic_MLR_model_kable <- kable(sociodemographic_MLR_model_tidy[-c(1), ],
digits = 2)
sociodemographic_MLR_model_kable
psychiatric_and_health_MLR_model <- lm(total_COPING_waves ~ phq.sum_score +
gad.sum_score +
audit.sum_score +
dem.select_the_box_that_best_describes_you +
physical_health_comorbidities +
mental_health_comorbidities +
depressive_and_anxiety_comorbidity +
eating_disorders +
OCRDs +
psychotic_and_biploar_disorder +
mhd.asd +
mhd.addadhd +
mhd.personality_disorder,
family = "binomial",
data = glad_coping_participation_raw)
psychiatric_and_health_MLR_model <- lm(total_COPING_waves ~ phq.sum_score +
gad.sum_score +
audit.sum_score +
dem.select_the_box_that_best_describes_you +
physical_health_comorbidities +
mental_health_comorbidities +
depressive_and_anxiety_comorbidity +
eating_disorders +
OCRDs +
psychotic_and_biploar_disorder +
mhd.asd +
mhd.addadhd +
mhd.personality_disorder,
data = glad_coping_participation_raw)
psychiatric_and_health_MLR_model <- lm(total_COPING_waves ~ phq.sum_score +
gad.sum_score +
audit.sum_score +
dem.select_the_box_that_best_describes_you +
physical_health_comorbidities +
mental_health_comorbidities +
depressive_and_anxiety_comorbidity +
eating_disorders +
OCRDs +
psychotic_and_biploar_disorder +
mhd.asd +
mhd.addadhd +
mhd.personality_disorder,
data = glad_coping_participation_raw)
#Check model output
summary(psychiatric_and_health_MLR_model)
Variable = psychiatric_and_health_variable_names,
#Create tidy model output
psychiatric_and_health_MLR_model_tidy <- tidy(
psychiatric_and_health_MLR_model,
exponentiate = T,
conf.int = T) %>%
mutate(
Variable = psychiatric_and_health_variable_names,
Significance = if_else(
p.value < 0.05,
1,
0
) %>%
recode_factor(
"0" = "Not-significant",
"1" = "Significant"
)) %>%
select(
Variable,
estimate,
`CI 95% lower` = conf.low,
`CI 95% upper` = conf.high,
`p value` = p.value,
Significance
)
psychiatric_and_health_MLR_model_tidy %>%
head(14)
#Create kable output
psychiatric_and_health_MLR_model_kable <- kable(psychiatric_and_health_MLR_model_tidy[-c(1), ],
digits = 2)
psychiatric_and_health_MLR_model_kable
glad_study_variables_MLR_model <- lm(
formula = completed_baseline ~ startDate +
kit_returned +
joined_coping_first_invitation,
data = glad_coping_participation_raw)
#Check output
summary(glad_study_variables_MLR_model)
#Create tidy model output
glad_study_variables_MLR_model_tidy <- tidy(
glad_study_variables_MLR_model,
conf.int = T) %>%
mutate(
Variable = glad_study_variable_names,
Significance = if_else(
p.value < 0.05,
1,
0
) %>%
recode_factor(
"0" = "Not-significant",
"1" = "Significant"
)) %>%
select(
Variable,
estimate,
`CI 95% lower` = conf.low,
`CI 95% upper` = conf.high,
`p value` = p.value,
Significance
)
glad_study_variables_MLR_model_tidy %>%
head()
#Create kable output
glad_study_variables_MLR_model_kable <- kable(glad_study_variables_MLR_model_tidy[-c(1), ],
digits = 2)
glad_study_variables_MLR_model_kable
complete_LR_model <- lm(
formula = completed_baseline ~ age_cleaned +
gender_recode +
highest_education +
dem.questions_based_ethnic_origin +
dem.what_is_your_current_employment_status +
partnership_status +
phq.sum_score +
gad.sum_score +
audit.sum_score +
dem.select_the_box_that_best_describes_you +
physical_health_comorbidities +
mental_health_comorbidities +
depressive_and_anxiety_comorbidity +
eating_disorders +
OCRDs +
psychotic_and_biploar_disorder +
mhd.asd +
mhd.addadhd +
mhd.personality_disorder +
startDate +
kit_returned +
joined_coping_first_invitation,
data = glad_coping_participation_raw)
complete_MLR_model <- lm(
formula = completed_baseline ~ age_cleaned +
gender_recode +
highest_education +
dem.questions_based_ethnic_origin +
dem.what_is_your_current_employment_status +
partnership_status +
phq.sum_score +
gad.sum_score +
audit.sum_score +
dem.select_the_box_that_best_describes_you +
physical_health_comorbidities +
mental_health_comorbidities +
depressive_and_anxiety_comorbidity +
eating_disorders +
OCRDs +
psychotic_and_biploar_disorder +
mhd.asd +
mhd.addadhd +
mhd.personality_disorder +
startDate +
kit_returned +
joined_coping_first_invitation,
data = glad_coping_participation_raw)
#Check output
summary(complete_MLR_model)
#Create tidy model output
complete_MLR_model_tidy <- tidy(
complete_MLR_model,
conf.int = T) %>%
mutate(
Variable = complete_LR_model_names,
Significance = if_else(
p.value < 0.05,
1,
0
) %>%
recode_factor(
"0" = "Not-significant",
"1" = "Significant"
)) %>%
select(
Variable,
estimate,
`CI 95% lower` = conf.low,
`CI 95% upper` = conf.high,
`p value` = p.value,
Significance
)
complete_MLR_model_tidy %>%
head(23)
#Create kable output
complete_MLR_model_kable <- kable(complete_MLR_model_tidy[-c(1), ],
digits = 2)
complete_MLR_model_kable
complete_MLR_model_tidy %>%
vif()
complete_MLR_model_tidy %>%
VIF()
complete_LR_model_VIF
complete_LR_model
complete_MLR_model_tidy %>%
vif()
complete_MLR_model %>%
vif()
#ggfortify option to see all at once nicely faceted
autoplot(complete_MLR_model, which = 1:6) + theme_minimal()
par(mfrow=c(2,2))
plot(complete_MLR_model)
sociodemographic_MLR_model %>%
vif()
par(mfrow=c(2,2))
plot(sociodemographic_MLR_model)
psychiatric_and_health_MLR_model %>%
vif()
par(mfrow=c(2,2))
plot(psychiatric_and_health_MLR_model)
influenceIndexPlot(complete_MLR_model)
outlierTest(complete_MLR_model)
durbinWatsonTest(complete_MLR_model)
