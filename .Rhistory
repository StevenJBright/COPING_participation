startDate >= start2 &
startDate < end2 ~ ".Wave_2_QA",
startDate >= start4 &
startDate < end4 ~ ".Wave_4_QA",
startDate >= start6 &
startDate < end6 ~ ".Wave_6_QA",
startDate >= start8 &
startDate < end8 ~ ".Wave_8_QA",
startDate >= start10 &
startDate < end10 ~ ".Wave_10_QA",
startDate >= start12 &
startDate < end12 ~ ".Wave_12_QA",
startDate >= start14 &
startDate < end14 ~ ".Wave_14_QA"
))
#Note: QA are questionnaires that are A FOLLOW UP QUESTIONNAIRES but answered within a time point that was considered a "follow up B time-point"
COPING_followup_B_phq_waves <- COPING_followup_B_phq_raw %>%
mutate(COPING_waves_B =
case_when(
startDate >= start1 &
startDate < end1 ~ ".Wave_1_QB",
startDate >= start3 &
startDate < end3 ~ ".Wave_3_QB",
startDate >= start5 &
startDate < end5 ~ ".Wave_5_QB",
startDate >= start7 &
startDate < end7 ~ ".Wave_7_QB",
startDate >= start9 &
startDate< end9 ~ ".Wave_9_QB",
startDate >= start11 &
startDate < end11 ~ ".Wave_11_QB",
startDate >= start13 &
startDate < end13 ~ ".Wave_13_QB",
startDate >= start15 &
startDate < end15 ~ ".Wave_15_QB",
startDate >= start2 &
startDate < end2 ~ ".Wave_2",
startDate >= start4 &
startDate < end4 ~ ".Wave_4",
startDate >= start6 &
startDate < end6 ~ ".Wave_6",
startDate >= start8 &
startDate < end8 ~ ".Wave_8",
startDate >= start10 &
startDate < end10 ~ ".Wave_10",
startDate >= start12 &
startDate < end12 ~ ".Wave_12",
startDate >= start14 &
startDate < end14 ~ ".Wave_14"
))
COPING_followup_A_dem_waves %>%
freq(COPING_waves_A)
COPING_followup_B_phq_waves %>%
freq(COPING_waves_B)
COPING_followup_A_wave_1 <- COPING_followup_A_dem_waves %>%
filter(COPING_waves_A == ".Wave_1")
COPING_followup_A_wave_3 <- COPING_followup_A_dem_waves %>%
filter(COPING_waves_A == ".Wave_3")
COPING_followup_A_wave_5 <- COPING_followup_A_dem_waves %>%
filter(COPING_waves_A == ".Wave_5")
COPING_followup_A_wave_7 <- COPING_followup_A_dem_waves %>%
filter(COPING_waves_A == ".Wave_7")
COPING_followup_A_wave_9 <- COPING_followup_A_dem_waves %>%
filter(COPING_waves_A == ".Wave_9")
COPING_followup_A_wave_11 <- COPING_followup_A_dem_waves %>%
filter(COPING_waves_A == ".Wave_11")
COPING_followup_A_wave_13 <- COPING_followup_A_dem_waves %>%
filter(COPING_waves_A == ".Wave_13")
COPING_followup_B_wave_2 <- COPING_followup_B_phq_waves %>%
filter(COPING_waves_B == ".Wave_2")
COPING_followup_B_wave_4 <- COPING_followup_B_phq_waves %>%
filter(COPING_waves_B == ".Wave_4")
COPING_followup_B_wave_6 <- COPING_followup_B_phq_waves %>%
filter(COPING_waves_B == ".Wave_6")
COPING_followup_B_wave_8 <- COPING_followup_B_phq_waves %>%
filter(COPING_waves_B == ".Wave_8")
COPING_followup_B_wave_10 <- COPING_followup_B_phq_waves %>%
filter(COPING_waves_B == ".Wave_10")
COPING_followup_B_wave_12 <- COPING_followup_B_phq_waves %>%
filter(COPING_waves_B == ".Wave_12")
COPING_followup_B_wave_14 <- COPING_followup_B_phq_waves %>%
filter(COPING_waves_B == ".Wave_14")
#Put the wave data sets into a new list
COPING_waves_tib_list <- list(COPING_followup_A_wave_1,
COPING_followup_B_wave_2,
COPING_followup_A_wave_3,
COPING_followup_B_wave_4,
COPING_followup_A_wave_5,
COPING_followup_B_wave_6,
COPING_followup_A_wave_7,
COPING_followup_B_wave_8,
COPING_followup_A_wave_9,
COPING_followup_B_wave_10,
COPING_followup_A_wave_11,
COPING_followup_B_wave_12,
COPING_followup_A_wave_13,
COPING_followup_B_wave_14)
COPING_waves_tib_list_cleansIDs <- COPING_waves_tib_list %>%
map(distinct,
externalDataReference,
.keep_all = TRUE)
COPING_waves_tib_list_cleansIDs <- COPING_waves_tib_list_cleansIDs %>%
map(drop_na,
externalDataReference)
#Create a character vector of the new column names for the waves in the GLAD
#sign up
GLAD_signup_wave_col_names <- c(
"completed_wave_1",
"completed_wave_2",
"completed_wave_3",
"completed_wave_4",
"completed_wave_5",
"completed_wave_6",
"completed_wave_7",
"completed_wave_8",
"completed_wave_9",
"completed_wave_10",
"completed_wave_11",
"completed_wave_12",
"completed_wave_13",
"completed_wave_14"
)
#Create N completed wave variable in GLAD sign up for each COPING object
GLAD_signup_waves <- COPING_waves_tib_list %>%
map2(GLAD_signup_wave_col_names, function(x, y){
df <- glad_signup_completed_baseline %>%
mutate(!!y :=
case_when(
externalDataReference %in% x$externalDataReference ~ 1,
externalDataReference %not_in% x$externalDataReference ~ 0
))
return(df)
})
GLAD_signup_waves_merged <- GLAD_signup_waves %>%
reduce(full_join)
#Check data
GLAD_signup_waves_merged %>%
dim()
GLAD_signup_waves_merged %>%
colnames()
#See distribution for each variable
GLAD_signup_wave_col_names %>%
map(function(x){
group_by_at(GLAD_signup_waves_merged, x) %>%
summarise(Count = n()) %>%
as_tibble()
})
#Calculate every pt's total disorders with row sums
glad_signup_total_waves <- GLAD_signup_waves_merged %>%
mutate(
total_COPING_waves =
rowSums(.[GLAD_signup_wave_col_names])
)
#Check results
glad_signup_total_waves %>%
freq(total_COPING_waves)
glad_signup_total_waves$total_COPING_waves_labelled <- factor(
glad_signup_total_waves$total_COPING_waves,
levels = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14),
labels = c("0 surveys", "1 survey", "2 surveys", "3 surveys", "4 surveys",
"5 surveys", "6 surveys", "7 Surveys", "8 surveys",
"9 surveys", "10 surveys", "11 surveys", "12 surveys",
"13 surveys", "14 surveys")
)
#Check output
glad_signup_total_waves %>%
group_by(total_COPING_waves_labelled) %>%
count()
glad_signup_total_waves <- glad_signup_total_waves %>%
mutate(total_COPING_waves_binary =
case_when(
total_COPING_waves <= 1 ~ 0,
total_COPING_waves > 1 ~ 1
)
)
#Check output
glad_signup_total_waves %>%
group_by(total_COPING_waves_binary) %>%
count()
glad_signup_total_waves$total_COPING_waves_binary_labelled <- factor(
glad_signup_total_waves$total_COPING_waves_binary,
levels = c(0, 1),
labels = c("0-1 surveys", "2+ surveys")
)
#Check output
glad_signup_total_waves %>%
group_by(total_COPING_waves_binary_labelled) %>%
count()
glad_signup_final <- glad_signup_total_waves %>%
filter(age_cleaned >= 16 &
age_cleaned <= 117) %>%  #41,142, 28 pt's removed
filter(!is.na(gender_recode_labelled)) %>% #40,271, 871 pt's removed
filter(joined_coping_first_invitation_labelled != "Not applicable") #34,285, 5,986 pt's removed
#Check results
glad_signup_total_waves %>%
dim()
glad_signup_final %>%
dim()
write_rds(glad_signup_final, paste0(processed_data_path, "glad_coping_participation.rds"))
knitr::opts_chunk$set(echo = TRUE)
remove(list = ls())
#Change it to "= 0" to turn it back on
options(scipen = 999)
#install.packages("broom")
#install.packages("knitr)
#install.packages("car")
#install.packages("rstatix")
#install.packages("pscl")
#install.packages("boot")
#install.packages("stats")
#install.packages("rcompanion")
#install.packages("MASS")
#install.packages("openxlsx")
#install.packages("tidyverse")
library(broom)
library(knitr)
library(car)
library(rstatix)
library(pscl)
library(boot)
library(stats)
library(rcompanion)
library(MASS)
library(openxlsx)
library(tidyverse)
source("..//COPING_participation_paths.r")
source("..//COPING_participation_functions.r")
glad_coping_participation <- read_rds(paste0(processed_data_path, processed_data_name))
#Check data
glad_coping_participation %>%
head()
#Create explanatory variables vector
explanatory_variables <- c(
"age_cleaned",
"gender_recode_labelled",
"highest_education_labelled",
"ethnicity_labelled",
"employment_labelled",
"partnership_status_labelled",
"phq.sum_score",
"gad.sum_score",
"audit.sum_score",
"smoking_status_labelled",
"physical_health_comorbidities_labelled",
"MH_disorders_total_count",
"depressive_and_anxiety_comorbidity_labelled",
"eating_disorders_labelled",
"OCRDs_labelled",
"psychotic_and_biploar_disorder_labelled",
"asd_labelled",
"ADHD_ADD_labelled",
"personality_disorder_labelled",
#"PTSD_labelled", # Hasing this out because it turns to NA in models after adding anx/dep comorbidity
"startDate",
"kit_returned_labelled"
#joined_coping_first_invitation_labelled,
)
#Create dependent variable vectors
coping_baseline_outcome <- c("completed_baseline_labelled")
coping_followups_outcome <- c("total_COPING_waves")
providing_kit_outcome <- c("kit_returned_labelled")
ZINB_model1_variables <- c(
"age_cleaned",
"gender_recode_labelled",
"highest_education_labelled",
"ethnicity_labelled",
"employment_labelled",
"partnership_status_labelled",
"phq.sum_score",
"gad.sum_score",
"audit.sum_score",
"smoking_status_labelled",
"physical_health_comorbidities_labelled",
"MH_disorders_total_count",
"depressive_and_anxiety_comorbidity_labelled",
"eating_disorders_labelled",
"OCRDs_labelled",
"psychotic_and_biploar_disorder_labelled",
"asd_labelled",
"ADHD_ADD_labelled",
"personality_disorder_labelled",
#"PTSD_labelled", #Causes an error after adding anx/dep comorbidity variable
"kit_returned_labelled"
#"startDate" #Throws error
)
#Explanatory variables for exploratory models
##Exploratory model 1: Without the saliva kit variable
exploratory_ZINB_model1_variables <- ZINB_model1_variables %>%
str_subset(pattern = "kit_returned_labelled",
negate = TRUE)
##Exploratory model 2: Only pt's who have provided a saliva kit
exploratory_ZINB_model2_variables <- exploratory_ZINB_model1_variables
#Main aim1 formula
aim1_baseline_participation_formula <- as.formula(paste(coping_baseline_outcome,
paste(explanatory_variables,
collapse=" + "),
sep = " ~ "))
#Exploratory aim1 formulas
##Exploratory model 1: Omitting the saliva kit variable
exploratory_LR_model1_explan_vars <- explanatory_variables %>%
str_subset(pattern = "kit_returned_labelled",
negate = TRUE)
exploratory_LR_model1_formula <- as.formula(paste(coping_baseline_outcome,
paste(exploratory_LR_model1_explan_vars,
collapse=" + "),
sep = " ~ "))
##Exploratory model 2: Only participants who have returned a saliva kit
exploratory_LR_model2_explan_vars <- explanatory_variables %>%
str_subset(pattern = "kit_returned_labelled",
negate = TRUE)
exploratory_LR_model2_formula <- as.formula(paste(coping_baseline_outcome,
paste(exploratory_LR_model2_explan_vars,
collapse=" + "),
sep = " ~ "))
##Exploratory model 3: Providing a saliva kit as the outcome variable
exploratory_LR_model3_explan_vars <- explanatory_variables %>%
str_subset(pattern = "kit_returned_labelled",
negate = TRUE)
exploratory_LR_model3_formula <- as.formula(paste(providing_kit_outcome,
paste(exploratory_LR_model3_explan_vars,
collapse=" + "),
sep = " ~ "))
#Explanatory aim2 model formulas
##Explanatory model 1: Without the saliva kit variable
exploratory_ZINB_model1_exclude_vars <- c("kit_returned_labelled|startDate")
exploratory_ZINB_model1_explan_vars <- explanatory_variables %>%
str_subset(pattern = exploratory_ZINB_model1_exclude_vars,
negate = TRUE)
exploratory_ZINB_model1_formula <- as.formula(paste(coping_baseline_outcome,
paste(exploratory_ZINB_model1_explan_vars,
collapse=" + "),
sep = " ~ "))
##Explanatory model 2: Only pt's who returned their saliva kit
exploratory_ZINB_model2_formula <- exploratory_ZINB_model1_formula
aim1_LR_model_names <- c(
"Intercept",
"age_cleaned",
"gender_recode_labelledFemale",
"gender_recode_labelledNon-binary/prefer to self-define",
"highest_education_labelledA levels/AS levels or equivalent",
"highest_education_labelledO levels/GCSEs or CSEs or equivalent",
"highest_education_labelledNVQ or HND or HNC or equivalent",
"highest_education_labelledNone of the above",
"ethnicity_labelledMixed",
"ethnicity_labelledAsian or Asian British",
"ethnicity_labelledBlack or Black British",
"ethnicity_labelledArab",
"ethnicity_labelledOther",
"employment_labelledRetired",
"employment_labelledLooking after home and/or family",
"employment_labelledUnable to work because of sickness or disability",
"employment_labelledUnemployed",
"employment_labelledDoing unpaid or voluntary work",
"employment_labelledFull or part-time_student",
"employment_labelledNone of the above",
"partnership_status_labelledRelationship or married/civil partnership",
"partnership_status_labelledDivorced/widowed/separated",
"phq.sum_score",
"gad.sum_score",
"audit.sum_score",
"smoking_status_labelledI smoke now",
"smoking_status_labelledI used to smoke",
"physical_health_comorbidities_labelled1 physical health disorder",
"physical_health_comorbidities_labelled2+ physical health disorders",
"MH_disorders_total_count",
"depressive_and_anxiety_comorbidity_labelledDepressive and anxiety disorder",
"depressive_and_anxiety_comorbidity_labelledDepressive disorder only",
"depressive_and_anxiety_comorbidity_labelledAnxiety disorder only",
"eating_disorders_labelledEating disorder",
"OCRDs_labelledOCRDs",
"psychotic_and_biploar_disorder_labelledPsychotic and bipolar disorder",
"psychotic_and_biploar_disorder_labelledOnly psychotic disorder",
"psychotic_and_biploar_disorder_labelledOnly bipolar disorder",
"asd_labelledAutistic spectrum disorder",
"ADHD_ADD_labelledADHD or ADD disorder",
"mhd.personality_disorder_labelledPersonality disorder",
#"PTSD_labelledPost-traumatic stress disorder", # turns to NA in models after adding anx/dep comorbidity
"startDate",
"kit_returnedPt has provided saliva kit"
#"joined_coping_first_invitationCompleted COPING baseline before 1st follow-up"
)
#Exploratory model 1: Remove the saliva kit provided variable
exploratory_LR_model1_names <- aim1_LR_model_names %>%
str_subset(pattern = "kit_returnedPt has provided saliva kit",
negate = TRUE)
#Exploratory model 2: Only pt's who have provided a saliva kit
exploratory_LR_model2_names <- exploratory_LR_model1_names
#Exploratory model 3: Providing a saliva kit as the outcome variable
exploratory_LR_model3_names <- exploratory_LR_model1_names
glad_coping_participation_returned_kit <- glad_coping_participation %>%
filter(kit_returned == 1)
#We want the depression/anxiety comorbidity to be the reference group because it has the largest N
##Full sample
glad_coping_participation$depressive_and_anxiety_comorbidity_labelled <- relevel(glad_coping_participation$depressive_and_anxiety_comorbidity_labelled,
ref = "Depressive and anxiety disorder")
##Pt's who have provided a kit
glad_coping_participation_returned_kit$depressive_and_anxiety_comorbidity_labelled <- relevel(glad_coping_participation_returned_kit$depressive_and_anxiety_comorbidity_labelled,
ref = "Depressive and anxiety disorder")
#Create p-value and no. of test objects
standard_p_value_level <- 0.05
no_of_tests <- 5
#Create adjusted p value threshold
adj_p_value_threshold <- format.pval(pv = standard_p_value_level / no_of_tests,
digits = 2)
#Check threshold
adj_p_value_threshold
aim1_LR_model <- glm(
formula = aim1_baseline_participation_formula,
family = "binomial",
data = glad_coping_participation)
#Check output
summary(aim1_LR_model)
aim1_LR_model %>%
nagelkerke()
#Create tidy model output
aim1_LR_model_tidy <- tidy(
aim1_LR_model,
exponentiate = T,
conf.int = T) %>%
mutate(
Variable = aim1_LR_model_names,
Significance = if_else(
p.value < 0.05,
1,
0
) %>%
recode_factor(
"0" = "Not-significant",
"1" = "Significant"
)) %>%
dplyr::select(
Variable,
OR = estimate,
`CI 95% lower` = conf.low,
`CI 95% upper` = conf.high,
p.value,
Significance
) %>%
mutate(
#adj.p.value = p.adjust(p.value,
#                       "bonferroni"),
#adj_significance = case_when(
#    adj.p.value <= 0.001 ~ "***",
#    adj.p.value <= 0.01 ~ "**",
#    adj.p.value <= 0.05 ~ "*",
#    adj.p.value > 0.05 ~ ""
#  ),
OR = round(OR, 2),
`CI 95% lower` = round(`CI 95% lower`, 2),
`CI 95% upper` = round(`CI 95% upper`, 2),
p.value = format.pval(pv = p.value,
digits = 2),
threshold_adj_sig = case_when(
p.value <= adj_p_value_threshold ~ "Significant",
p.value > adj_p_value_threshold ~ "Not-significant"
)
)
#Check output
aim1_LR_model_tidy
aim1_LR_model_names <- c(
"Intercept",
"age_cleaned",
"gender_recode_labelledFemale",
"gender_recode_labelledNon-binary/prefer to self-define",
"highest_education_labelledA levels/AS levels or equivalent",
"highest_education_labelledO levels/GCSEs or CSEs or equivalent",
"highest_education_labelledNVQ or HND or HNC or equivalent",
"highest_education_labelledNone of the above",
"ethnicity_labelledMixed",
"ethnicity_labelledAsian or Asian British",
"ethnicity_labelledBlack or Black British",
"ethnicity_labelledArab",
"ethnicity_labelledOther",
"employment_labelledRetired",
"employment_labelledLooking after home and/or family",
"employment_labelledUnable to work because of sickness or disability",
"employment_labelledUnemployed",
"employment_labelledDoing unpaid or voluntary work",
"employment_labelledFull or part-time_student",
"employment_labelledNone of the above",
"partnership_status_labelledRelationship or married/civil partnership",
"partnership_status_labelledDivorced/widowed/separated",
"phq.sum_score",
"gad.sum_score",
"audit.sum_score",
"smoking_status_labelledI smoke now",
"smoking_status_labelledI used to smoke",
"physical_health_comorbidities_labelled1 physical health disorder",
"physical_health_comorbidities_labelled2+ physical health disorders",
"MH_disorders_total_count",
"depressive_and_anxiety_comorbidity_labelledNo depressive and anxiety disorder",
"depressive_and_anxiety_comorbidity_labelledDepressive disorder only",
"depressive_and_anxiety_comorbidity_labelledAnxiety disorder only",
"eating_disorders_labelledEating disorder",
"OCRDs_labelledOCRDs",
"psychotic_and_biploar_disorder_labelledPsychotic and bipolar disorder",
"psychotic_and_biploar_disorder_labelledOnly psychotic disorder",
"psychotic_and_biploar_disorder_labelledOnly bipolar disorder",
"asd_labelledAutistic spectrum disorder",
"ADHD_ADD_labelledADHD or ADD disorder",
"mhd.personality_disorder_labelledPersonality disorder",
#"PTSD_labelledPost-traumatic stress disorder", # turns to NA in models after adding anx/dep comorbidity
"startDate",
"kit_returnedPt has provided saliva kit"
#"joined_coping_first_invitationCompleted COPING baseline before 1st follow-up"
)
aim1_LR_model <- glm(
formula = aim1_baseline_participation_formula,
family = "binomial",
data = glad_coping_participation)
#Check output
summary(aim1_LR_model)
